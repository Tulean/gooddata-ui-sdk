// (C) 2021 GoodData Corporation

/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

// @ts-ignore
import globalImportUrl from "url";
import globalImportQs from "qs";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from "axios";
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from "./base";

// utility function that adds support for nested objects in query
const addFlattenedObjectTo = (object: any, target: any): void => {
    const flattened = globalImportQs.parse(globalImportQs.stringify(object), { depth: 0 });
    Object.keys(flattened).forEach((key) => {
        target[key] = (flattened as any)[key];
    });
};

/**
 *
 * @export
 * @interface DatasetReferenceIdentifier
 */
export interface DatasetReferenceIdentifier {
    /**
     *
     * @type {string}
     * @memberof DatasetReferenceIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DatasetReferenceIdentifier
     */
    type: DatasetReferenceIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum DatasetReferenceIdentifierTypeEnum {
    Dataset = "dataset",
}

/**
 *
 * @export
 * @interface DeclarativeAnalyticalDashboard
 */
export interface DeclarativeAnalyticalDashboard {
    /**
     * Analytical dashboard ID.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    id: string;
    /**
     * Analytical dashboard title.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    title: string;
    /**
     * Analytical dashboard description.
     * @type {string}
     * @memberof DeclarativeAnalyticalDashboard
     */
    description: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeAnalyticalDashboard
     */
    content: object;
}
/**
 * Entities describing users\' view on data.
 * @export
 * @interface DeclarativeAnalytics
 */
export interface DeclarativeAnalytics {
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeAnalytics
     */
    analytics: DeclarativeAnalyticsLayer;
}
/**
 *
 * @export
 * @interface DeclarativeAnalyticsLayer
 */
export interface DeclarativeAnalyticsLayer {
    /**
     * A list of analytical dashboards available in the model.
     * @type {Array<DeclarativeAnalyticalDashboard>}
     * @memberof DeclarativeAnalyticsLayer
     */
    analyticalDashboards: Array<DeclarativeAnalyticalDashboard>;
    /**
     * A list of filter contexts available in the model.
     * @type {Array<DeclarativeFilterContext>}
     * @memberof DeclarativeAnalyticsLayer
     */
    filterContexts: Array<DeclarativeFilterContext>;
    /**
     * A list of metrics available in the model.
     * @type {Array<DeclarativeMetric>}
     * @memberof DeclarativeAnalyticsLayer
     */
    metrics: Array<DeclarativeMetric>;
    /**
     * A list of visualization objects available in the model.
     * @type {Array<DeclarativeVisualizationObject>}
     * @memberof DeclarativeAnalyticsLayer
     */
    visualizationObjects: Array<DeclarativeVisualizationObject>;
}
/**
 * A dataset attribute.
 * @export
 * @interface DeclarativeAttribute
 */
export interface DeclarativeAttribute {
    /**
     * Attribute ID.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    id: string;
    /**
     * Attribute title.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    title: string;
    /**
     * Attribute description.
     * @type {string}
     * @memberof DeclarativeAttribute
     */
    description: string;
    /**
     * An array of attribute labels.
     * @type {Array<DeclarativeLabel>}
     * @memberof DeclarativeAttribute
     */
    labels: Array<DeclarativeLabel>;
}
/**
 * A table column.
 * @export
 * @interface DeclarativeColumn
 */
export interface DeclarativeColumn {
    /**
     * Column name
     * @type {string}
     * @memberof DeclarativeColumn
     */
    name: string;
    /**
     * Column type
     * @type {string}
     * @memberof DeclarativeColumn
     */
    dataType: DeclarativeColumnDataTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum DeclarativeColumnDataTypeEnum {
    INT = "INT",
    STRING = "STRING",
    DATE = "DATE",
    NUMERIC = "NUMERIC",
    TIMESTAMP = "TIMESTAMP",
    BOOLEAN = "BOOLEAN",
}

/**
 * A data source.
 * @export
 * @interface DeclarativeDataSource
 */
export interface DeclarativeDataSource {
    /**
     * Data source name.
     * @type {string}
     * @memberof DeclarativeDataSource
     */
    name: string;
    /**
     * An array of physical database tables.
     * @type {Array<DeclarativeTable>}
     * @memberof DeclarativeDataSource
     */
    tables: Array<DeclarativeTable>;
}
/**
 * A dataset defined by its properties.
 * @export
 * @interface DeclarativeDataset
 */
export interface DeclarativeDataset {
    /**
     * The Dataset ID. This ID is further used to refer to this instance of dataset.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    id: string;
    /**
     * A dataset title.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    title: string;
    /**
     * A dataset description.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    description: string;
    /**
     * An array of grain identifiers.
     * @type {Array<GrainIdentifier>}
     * @memberof DeclarativeDataset
     */
    grain: Array<GrainIdentifier>;
    /**
     * An array of attributes.
     * @type {Array<DeclarativeAttribute>}
     * @memberof DeclarativeDataset
     */
    attributes: Array<DeclarativeAttribute>;
    /**
     * An array of facts.
     * @type {Array<DeclarativeFact>}
     * @memberof DeclarativeDataset
     */
    facts: Array<DeclarativeFact>;
    /**
     * An array of references.
     * @type {Array<DeclarativeReference>}
     * @memberof DeclarativeDataset
     */
    references: Array<DeclarativeReference>;
    /**
     * A name of the source/originating table for the dataset from the physical data model.
     * @type {string}
     * @memberof DeclarativeDataset
     */
    sourceTable: string;
}
/**
 * A date dataset.
 * @export
 * @interface DeclarativeDateDataset
 */
export interface DeclarativeDateDataset {
    /**
     * Date dataset ID.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    id: string;
    /**
     * Date dataset title.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    title: string;
    /**
     * Date dataset description.
     * @type {string}
     * @memberof DeclarativeDateDataset
     */
    description: string;
    /**
     *
     * @type {GranularitiesFormatting}
     * @memberof DeclarativeDateDataset
     */
    granularitiesFormatting: GranularitiesFormatting;
    /**
     * An array of date granularities. All listed granularities will be available for date dataset.
     * @type {Array<string>}
     * @memberof DeclarativeDateDataset
     */
    granularities: Array<DeclarativeDateDatasetGranularitiesEnum>;
}

/**
 * @export
 * @enum {string}
 */
export enum DeclarativeDateDatasetGranularitiesEnum {
    MINUTE = "MINUTE",
    HOUR = "HOUR",
    DAY = "DAY",
    WEEK = "WEEK",
    WEEKEU = "WEEK_EU",
    MONTH = "MONTH",
    QUARTER = "QUARTER",
    YEAR = "YEAR",
    MINUTEOFHOUR = "MINUTE_OF_HOUR",
    HOUROFDAY = "HOUR_OF_DAY",
    DAYOFWEEK = "DAY_OF_WEEK",
    DAYOFWEEKEU = "DAY_OF_WEEK_EU",
    DAYOFMONTH = "DAY_OF_MONTH",
    DAYOFYEAR = "DAY_OF_YEAR",
    WEEKOFYEAR = "WEEK_OF_YEAR",
    WEEKOFYEAREU = "WEEK_OF_YEAR_EU",
    MONTHOFYEAR = "MONTH_OF_YEAR",
    QUARTEROFYEAR = "QUARTER_OF_YEAR",
}

/**
 * A dataset fact.
 * @export
 * @interface DeclarativeFact
 */
export interface DeclarativeFact {
    /**
     * Fact ID.
     * @type {string}
     * @memberof DeclarativeFact
     */
    id: string;
    /**
     * Fact title.
     * @type {string}
     * @memberof DeclarativeFact
     */
    title: string;
    /**
     * Fact description.
     * @type {string}
     * @memberof DeclarativeFact
     */
    description: string;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeFact
     */
    sourceColumn: string;
}
/**
 *
 * @export
 * @interface DeclarativeFilterContext
 */
export interface DeclarativeFilterContext {
    /**
     * Filter Context ID.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    id: string;
    /**
     * Filter Context title.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    title: string;
    /**
     * Filter Context description.
     * @type {string}
     * @memberof DeclarativeFilterContext
     */
    description: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeFilterContext
     */
    content: object;
}
/**
 * A attribute label.
 * @export
 * @interface DeclarativeLabel
 */
export interface DeclarativeLabel {
    /**
     * Label ID.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    id: string;
    /**
     * Label title.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    title: string;
    /**
     * Label description.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    description: string;
    /**
     * A flag indicating whether the label should be treated as a primary one.
     * @type {boolean}
     * @memberof DeclarativeLabel
     */
    primary: boolean;
    /**
     * A name of the source column in the table.
     * @type {string}
     * @memberof DeclarativeLabel
     */
    sourceColumn: string;
}
/**
 * A logical data model (LDM) representation.
 * @export
 * @interface DeclarativeLdm
 */
export interface DeclarativeLdm {
    /**
     * An array containing datasets.
     * @type {Array<DeclarativeDataset>}
     * @memberof DeclarativeLdm
     */
    datasets: Array<DeclarativeDataset>;
    /**
     * An array containing date-related datasets.
     * @type {Array<DeclarativeDateDataset>}
     * @memberof DeclarativeLdm
     */
    dateInstances: Array<DeclarativeDateDataset>;
}
/**
 *
 * @export
 * @interface DeclarativeMetric
 */
export interface DeclarativeMetric {
    /**
     * Metric ID.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    id: string;
    /**
     * Metric title.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    title: string;
    /**
     * Metric description.
     * @type {string}
     * @memberof DeclarativeMetric
     */
    description: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeMetric
     */
    content: object;
}
/**
 * A data model structured as a set of its attributes.
 * @export
 * @interface DeclarativeModel
 */
export interface DeclarativeModel {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeModel
     */
    ldm: DeclarativeLdm;
    /**
     *
     * @type {DeclarativePdm}
     * @memberof DeclarativeModel
     */
    pdm: DeclarativePdm;
}
/**
 * A physical data model (PDM) representation.
 * @export
 * @interface DeclarativePdm
 */
export interface DeclarativePdm {
    /**
     * An array of data sources.
     * @type {Array<DeclarativeDataSource>}
     * @memberof DeclarativePdm
     */
    sources: Array<DeclarativeDataSource>;
}
/**
 * A dataset reference.
 * @export
 * @interface DeclarativeReference
 */
export interface DeclarativeReference {
    /**
     *
     * @type {ReferenceIdentifier}
     * @memberof DeclarativeReference
     */
    identifier: ReferenceIdentifier;
    /**
     * The multi-value flag enables many-to-many cardinality for references.
     * @type {boolean}
     * @memberof DeclarativeReference
     */
    multivalue: boolean;
    /**
     * An array of source column names for a given reference.
     * @type {Array<string>}
     * @memberof DeclarativeReference
     */
    sourceColumns: Array<string>;
}
/**
 * A database table.
 * @export
 * @interface DeclarativeTable
 */
export interface DeclarativeTable {
    /**
     * Table name.
     * @type {string}
     * @memberof DeclarativeTable
     */
    name: string;
    /**
     * An array of physical columns
     * @type {Array<DeclarativeColumn>}
     * @memberof DeclarativeTable
     */
    columns: Array<DeclarativeColumn>;
}
/**
 *
 * @export
 * @interface DeclarativeVisualizationObject
 */
export interface DeclarativeVisualizationObject {
    /**
     * Visualization object ID.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    id: string;
    /**
     * Visualization object title.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    title: string;
    /**
     * Visualization object description.
     * @type {string}
     * @memberof DeclarativeVisualizationObject
     */
    description: string;
    /**
     * A server agnostic definition of the visualization object in JSON format.
     * @type {object}
     * @memberof DeclarativeVisualizationObject
     */
    content: object;
}
/**
 *
 * @export
 * @interface DeclarativeWorkspace
 */
export interface DeclarativeWorkspace {
    /**
     *
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof DeclarativeWorkspace
     */
    name: string;
    /**
     *
     * @type {DeclarativeWorkspaceModel}
     * @memberof DeclarativeWorkspace
     */
    model: DeclarativeWorkspaceModel;
    /**
     *
     * @type {WorkspaceIdentifier}
     * @memberof DeclarativeWorkspace
     */
    parent?: WorkspaceIdentifier;
}
/**
 *
 * @export
 * @interface DeclarativeWorkspaceModel
 */
export interface DeclarativeWorkspaceModel {
    /**
     *
     * @type {DeclarativeLdm}
     * @memberof DeclarativeWorkspaceModel
     */
    ldm: DeclarativeLdm;
    /**
     *
     * @type {DeclarativePdm}
     * @memberof DeclarativeWorkspaceModel
     */
    pdm: DeclarativePdm;
    /**
     *
     * @type {DeclarativeAnalyticsLayer}
     * @memberof DeclarativeWorkspaceModel
     */
    analytics: DeclarativeAnalyticsLayer;
}
/**
 *
 * @export
 * @interface DeclarativeWorkspaces
 */
export interface DeclarativeWorkspaces {
    /**
     *
     * @type {Array<DeclarativeWorkspace>}
     * @memberof DeclarativeWorkspaces
     */
    workspaces: Array<DeclarativeWorkspace>;
}
/**
 * A grain identifier.
 * @export
 * @interface GrainIdentifier
 */
export interface GrainIdentifier {
    /**
     * Grain ID.
     * @type {string}
     * @memberof GrainIdentifier
     */
    id: string;
    /**
     * A type of the grain.
     * @type {string}
     * @memberof GrainIdentifier
     */
    type: GrainIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum GrainIdentifierTypeEnum {
    Attribute = "attribute",
    Dataset = "dataset",
}

/**
 * A date dataset granularities title formatting rules.
 * @export
 * @interface GranularitiesFormatting
 */
export interface GranularitiesFormatting {
    /**
     * Title base is used as a token in title pattern. If left empty, it is replaced by date dataset title.
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titleBase: string;
    /**
     * This pattern is used to generate the title of attributes and labels that result from the granularities. There are two tokens available:  * `%titleBase` - represents shared part by all titles, or title of Date Dataset if left empty * `%granularityTitle` - represents `DateGranularity` built-in title
     * @type {string}
     * @memberof GranularitiesFormatting
     */
    titlePattern: string;
}
/**
 * JSON:API representation of acl entity.
 * @export
 * @interface JsonApiACL
 */
export interface JsonApiACL {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiACL
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiACL
     */
    type: string;
    /**
     *
     * @type {JsonApiACLAttributes}
     * @memberof JsonApiACL
     */
    attributes?: JsonApiACLAttributes;
    /**
     *
     * @type {JsonApiACLRelationships}
     * @memberof JsonApiACL
     */
    relationships?: JsonApiACLRelationships;
}
/**
 *
 * @export
 * @interface JsonApiACLAttributes
 */
export interface JsonApiACLAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiACLAttributes
     */
    access?: JsonApiACLAttributesAccessEnum;
    /**
     *
     * @type {number}
     * @memberof JsonApiACLAttributes
     */
    priority?: number;
    /**
     *
     * @type {string}
     * @memberof JsonApiACLAttributes
     */
    control?: JsonApiACLAttributesControlEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiACLAttributesAccessEnum {
    FULLACCESS = "FULL_ACCESS",
}
/**
 * @export
 * @enum {string}
 */
export enum JsonApiACLAttributesControlEnum {
    ALLOW = "ALLOW",
    DENY = "DENY",
}

/**
 *
 * @export
 * @interface JsonApiACLDocument
 */
export interface JsonApiACLDocument {
    /**
     *
     * @type {JsonApiACL}
     * @memberof JsonApiACLDocument
     */
    data: JsonApiACL;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiACLDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserWithLinks | JsonApiUserGroupWithLinks>}
     * @memberof JsonApiACLDocument
     */
    included?: Array<JsonApiUserWithLinks | JsonApiUserGroupWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiACLList
 */
export interface JsonApiACLList {
    /**
     *
     * @type {Array<JsonApiACLWithLinks>}
     * @memberof JsonApiACLList
     */
    data: Array<JsonApiACLWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiACLList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserWithLinks | JsonApiUserGroupWithLinks>}
     * @memberof JsonApiACLList
     */
    included?: Array<JsonApiUserWithLinks | JsonApiUserGroupWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiACLRelationships
 */
export interface JsonApiACLRelationships {
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiACLRelationships
     */
    users?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiACLRelationships
     */
    userGroups?: JsonApiACLRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiACLRelationshipsUsers
 */
export interface JsonApiACLRelationshipsUsers {
    /**
     *
     * @type {Array<JsonApiLinkage>}
     * @memberof JsonApiACLRelationshipsUsers
     */
    data?: Array<JsonApiLinkage>;
}
/**
 *
 * @export
 * @interface JsonApiACLWithLinks
 */
export interface JsonApiACLWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiACLWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiACLWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiACLAttributes}
     * @memberof JsonApiACLWithLinks
     */
    attributes?: JsonApiACLAttributes;
    /**
     *
     * @type {JsonApiACLRelationships}
     * @memberof JsonApiACLWithLinks
     */
    relationships?: JsonApiACLRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiACLWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of analyticalDashboard entity.
 * @export
 * @interface JsonApiAnalyticalDashboard
 */
export interface JsonApiAnalyticalDashboard {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboard
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboard
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardAttributes}
     * @memberof JsonApiAnalyticalDashboard
     */
    attributes?: JsonApiAnalyticalDashboardAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardRelationships}
     * @memberof JsonApiAnalyticalDashboard
     */
    relationships?: JsonApiAnalyticalDashboardRelationships;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardAttributes
 */
export interface JsonApiAnalyticalDashboardAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAnalyticalDashboardAttributes
     */
    tags?: Array<string>;
    /**
     * Free-form JSON content.
     * @type {object}
     * @memberof JsonApiAnalyticalDashboardAttributes
     */
    content?: object;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardDocument
 */
export interface JsonApiAnalyticalDashboardDocument {
    /**
     *
     * @type {JsonApiAnalyticalDashboard}
     * @memberof JsonApiAnalyticalDashboardDocument
     */
    data: JsonApiAnalyticalDashboard;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAnalyticalDashboardDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiVisualizationObjectWithLinks | JsonApiLabelWithLinks | JsonApiMetricWithLinks | JsonApiDatasetWithLinks | JsonApiFilterContextWithLinks>}
     * @memberof JsonApiAnalyticalDashboardDocument
     */
    included?: Array<
        | JsonApiVisualizationObjectWithLinks
        | JsonApiLabelWithLinks
        | JsonApiMetricWithLinks
        | JsonApiDatasetWithLinks
        | JsonApiFilterContextWithLinks
    >;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiAnalyticalDashboardList
 */
export interface JsonApiAnalyticalDashboardList {
    /**
     *
     * @type {Array<JsonApiAnalyticalDashboardWithLinks>}
     * @memberof JsonApiAnalyticalDashboardList
     */
    data: Array<JsonApiAnalyticalDashboardWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiAnalyticalDashboardList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiVisualizationObjectWithLinks | JsonApiLabelWithLinks | JsonApiMetricWithLinks | JsonApiDatasetWithLinks | JsonApiFilterContextWithLinks>}
     * @memberof JsonApiAnalyticalDashboardList
     */
    included?: Array<
        | JsonApiVisualizationObjectWithLinks
        | JsonApiLabelWithLinks
        | JsonApiMetricWithLinks
        | JsonApiDatasetWithLinks
        | JsonApiFilterContextWithLinks
    >;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardRelationships
 */
export interface JsonApiAnalyticalDashboardRelationships {
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiAnalyticalDashboardRelationships
     */
    visualizationObjects?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiAnalyticalDashboardRelationships
     */
    labels?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiAnalyticalDashboardRelationships
     */
    metrics?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiAnalyticalDashboardRelationships
     */
    datasets?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiAnalyticalDashboardRelationships
     */
    filterContexts?: JsonApiACLRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiAnalyticalDashboardWithLinks
 */
export interface JsonApiAnalyticalDashboardWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAnalyticalDashboardWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardAttributes}
     * @memberof JsonApiAnalyticalDashboardWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardAttributes;
    /**
     *
     * @type {JsonApiAnalyticalDashboardRelationships}
     * @memberof JsonApiAnalyticalDashboardWithLinks
     */
    relationships?: JsonApiAnalyticalDashboardRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAnalyticalDashboardWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of apiToken entity.
 * @export
 * @interface JsonApiApiToken
 */
export interface JsonApiApiToken {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiToken
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiToken
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiApiToken
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface JsonApiApiTokenDocument
 */
export interface JsonApiApiTokenDocument {
    /**
     *
     * @type {JsonApiApiToken}
     * @memberof JsonApiApiTokenDocument
     */
    data: JsonApiApiToken;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiApiTokenDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiApiTokenList
 */
export interface JsonApiApiTokenList {
    /**
     *
     * @type {Array<JsonApiApiTokenWithLinks>}
     * @memberof JsonApiApiTokenList
     */
    data: Array<JsonApiApiTokenWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiApiTokenList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiApiTokenWithLinks
 */
export interface JsonApiApiTokenWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiApiTokenWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiApiTokenWithLinks
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiApiTokenWithLinks
     */
    attributes?: object;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiApiTokenWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of attribute entity.
 * @export
 * @interface JsonApiAttribute
 */
export interface JsonApiAttribute {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttribute
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttribute
     */
    type: string;
    /**
     *
     * @type {JsonApiAttributeAttributes}
     * @memberof JsonApiAttribute
     */
    attributes?: JsonApiAttributeAttributes;
    /**
     *
     * @type {JsonApiAttributeRelationships}
     * @memberof JsonApiAttribute
     */
    relationships?: JsonApiAttributeRelationships;
}
/**
 *
 * @export
 * @interface JsonApiAttributeAttributes
 */
export interface JsonApiAttributeAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiAttributeAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiAttributeAttributes
     */
    granularity?: JsonApiAttributeAttributesGranularityEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiAttributeAttributesGranularityEnum {
    MINUTE = "MINUTE",
    HOUR = "HOUR",
    DAY = "DAY",
    WEEK = "WEEK",
    WEEKEU = "WEEK_EU",
    MONTH = "MONTH",
    QUARTER = "QUARTER",
    YEAR = "YEAR",
    MINUTEOFHOUR = "MINUTE_OF_HOUR",
    HOUROFDAY = "HOUR_OF_DAY",
    DAYOFWEEK = "DAY_OF_WEEK",
    DAYOFWEEKEU = "DAY_OF_WEEK_EU",
    DAYOFMONTH = "DAY_OF_MONTH",
    DAYOFYEAR = "DAY_OF_YEAR",
    WEEKOFYEAR = "WEEK_OF_YEAR",
    WEEKOFYEAREU = "WEEK_OF_YEAR_EU",
    MONTHOFYEAR = "MONTH_OF_YEAR",
    QUARTEROFYEAR = "QUARTER_OF_YEAR",
}

/**
 *
 * @export
 * @interface JsonApiAttributeDocument
 */
export interface JsonApiAttributeDocument {
    /**
     *
     * @type {JsonApiAttribute}
     * @memberof JsonApiAttributeDocument
     */
    data: JsonApiAttribute;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetWithLinks | JsonApiLabelWithLinks>}
     * @memberof JsonApiAttributeDocument
     */
    included?: Array<JsonApiDatasetWithLinks | JsonApiLabelWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiAttributeList
 */
export interface JsonApiAttributeList {
    /**
     *
     * @type {Array<JsonApiAttributeWithLinks>}
     * @memberof JsonApiAttributeList
     */
    data: Array<JsonApiAttributeWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiAttributeList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetWithLinks | JsonApiLabelWithLinks>}
     * @memberof JsonApiAttributeList
     */
    included?: Array<JsonApiDatasetWithLinks | JsonApiLabelWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiAttributeRelationships
 */
export interface JsonApiAttributeRelationships {
    /**
     *
     * @type {JsonApiUserGroupRelationshipsUserGroup}
     * @memberof JsonApiAttributeRelationships
     */
    dataset?: JsonApiUserGroupRelationshipsUserGroup;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiAttributeRelationships
     */
    labels?: JsonApiACLRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiAttributeWithLinks
 */
export interface JsonApiAttributeWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiAttributeWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiAttributeWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiAttributeAttributes}
     * @memberof JsonApiAttributeWithLinks
     */
    attributes?: JsonApiAttributeAttributes;
    /**
     *
     * @type {JsonApiAttributeRelationships}
     * @memberof JsonApiAttributeWithLinks
     */
    relationships?: JsonApiAttributeRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiAttributeWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of data-source entity.
 * @export
 * @interface JsonApiDataSource
 */
export interface JsonApiDataSource {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSource
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSource
     */
    type: string;
    /**
     *
     * @type {JsonApiDataSourceAttributes}
     * @memberof JsonApiDataSource
     */
    attributes?: JsonApiDataSourceAttributes;
}
/**
 *
 * @export
 * @interface JsonApiDataSourceAttributes
 */
export interface JsonApiDataSourceAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceAttributes
     */
    type?: JsonApiDataSourceAttributesTypeEnum;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceAttributes
     */
    url?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceAttributes
     */
    schema?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceAttributes
     */
    username?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceAttributes
     */
    password?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDataSourceAttributes
     */
    uploadId?: string;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDataSourceAttributes
     */
    enableCaching?: boolean;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDataSourceAttributesTypeEnum {
    POSTGRESQL = "POSTGRESQL",
    REDSHIFT = "REDSHIFT",
    VERTICA = "VERTICA",
    SNOWFLAKE = "SNOWFLAKE",
    ADS = "ADS",
    BIGQUERY = "BIGQUERY",
    MSSQL = "MSSQL",
    PRESTO = "PRESTO",
}

/**
 *
 * @export
 * @interface JsonApiDataSourceDocument
 */
export interface JsonApiDataSourceDocument {
    /**
     *
     * @type {JsonApiDataSource}
     * @memberof JsonApiDataSourceDocument
     */
    data: JsonApiDataSource;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDataSourceList
 */
export interface JsonApiDataSourceList {
    /**
     *
     * @type {Array<JsonApiDataSourceWithLinks>}
     * @memberof JsonApiDataSourceList
     */
    data: Array<JsonApiDataSourceWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDataSourceList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiDataSourceWithLinks
 */
export interface JsonApiDataSourceWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataSourceWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataSourceWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiDataSourceAttributes}
     * @memberof JsonApiDataSourceWithLinks
     */
    attributes?: JsonApiDataSourceAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDataSourceWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of dataset entity.
 * @export
 * @interface JsonApiDataset
 */
export interface JsonApiDataset {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDataset
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDataset
     */
    type: string;
    /**
     *
     * @type {JsonApiDatasetAttributes}
     * @memberof JsonApiDataset
     */
    attributes?: JsonApiDatasetAttributes;
    /**
     *
     * @type {JsonApiDatasetRelationships}
     * @memberof JsonApiDataset
     */
    relationships?: JsonApiDatasetRelationships;
}
/**
 *
 * @export
 * @interface JsonApiDatasetAttributes
 */
export interface JsonApiDatasetAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDatasetAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetAttributes
     */
    type?: JsonApiDatasetAttributesTypeEnum;
    /**
     *
     * @type {Array<JsonApiDatasetAttributesGrain>}
     * @memberof JsonApiDatasetAttributes
     */
    grain?: Array<JsonApiDatasetAttributesGrain>;
    /**
     *
     * @type {Array<JsonApiDatasetAttributesReferenceProperties>}
     * @memberof JsonApiDatasetAttributes
     */
    referenceProperties?: Array<JsonApiDatasetAttributesReferenceProperties>;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetAttributes
     */
    sourceTable?: string;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDatasetAttributesTypeEnum {
    NORMAL = "NORMAL",
    DATE = "DATE",
}

/**
 *
 * @export
 * @interface JsonApiDatasetAttributesGrain
 */
export interface JsonApiDatasetAttributesGrain {
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetAttributesGrain
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiDatasetAttributesGrain
     */
    type: JsonApiDatasetAttributesGrainTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiDatasetAttributesGrainTypeEnum {
    Attribute = "attribute",
    Dataset = "dataset",
}

/**
 *
 * @export
 * @interface JsonApiDatasetAttributesReferenceProperties
 */
export interface JsonApiDatasetAttributesReferenceProperties {
    /**
     *
     * @type {DatasetReferenceIdentifier}
     * @memberof JsonApiDatasetAttributesReferenceProperties
     */
    identifier: DatasetReferenceIdentifier;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiDatasetAttributesReferenceProperties
     */
    multivalue: boolean;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiDatasetAttributesReferenceProperties
     */
    sourceColumns: Array<string>;
}
/**
 *
 * @export
 * @interface JsonApiDatasetDocument
 */
export interface JsonApiDatasetDocument {
    /**
     *
     * @type {JsonApiDataset}
     * @memberof JsonApiDatasetDocument
     */
    data: JsonApiDataset;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDatasetDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeWithLinks | JsonApiFactWithLinks | JsonApiDatasetWithLinks>}
     * @memberof JsonApiDatasetDocument
     */
    included?: Array<JsonApiAttributeWithLinks | JsonApiFactWithLinks | JsonApiDatasetWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiDatasetList
 */
export interface JsonApiDatasetList {
    /**
     *
     * @type {Array<JsonApiDatasetWithLinks>}
     * @memberof JsonApiDatasetList
     */
    data: Array<JsonApiDatasetWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiDatasetList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeWithLinks | JsonApiFactWithLinks | JsonApiDatasetWithLinks>}
     * @memberof JsonApiDatasetList
     */
    included?: Array<JsonApiAttributeWithLinks | JsonApiFactWithLinks | JsonApiDatasetWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiDatasetRelationships
 */
export interface JsonApiDatasetRelationships {
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiDatasetRelationships
     */
    attributes?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiDatasetRelationships
     */
    facts?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiDatasetRelationships
     */
    datasets?: JsonApiACLRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiDatasetWithLinks
 */
export interface JsonApiDatasetWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiDatasetWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiDatasetWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiDatasetAttributes}
     * @memberof JsonApiDatasetWithLinks
     */
    attributes?: JsonApiDatasetAttributes;
    /**
     *
     * @type {JsonApiDatasetRelationships}
     * @memberof JsonApiDatasetWithLinks
     */
    relationships?: JsonApiDatasetRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiDatasetWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of fact entity.
 * @export
 * @interface JsonApiFact
 */
export interface JsonApiFact {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFact
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFact
     */
    type: string;
    /**
     *
     * @type {JsonApiFactAttributes}
     * @memberof JsonApiFact
     */
    attributes?: JsonApiFactAttributes;
    /**
     *
     * @type {JsonApiFactRelationships}
     * @memberof JsonApiFact
     */
    relationships?: JsonApiFactRelationships;
}
/**
 *
 * @export
 * @interface JsonApiFactAttributes
 */
export interface JsonApiFactAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiFactAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiFactAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof JsonApiFactAttributes
     */
    sourceColumn?: string;
}
/**
 *
 * @export
 * @interface JsonApiFactDocument
 */
export interface JsonApiFactDocument {
    /**
     *
     * @type {JsonApiFact}
     * @memberof JsonApiFactDocument
     */
    data: JsonApiFact;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFactDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetWithLinks>}
     * @memberof JsonApiFactDocument
     */
    included?: Array<JsonApiDatasetWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiFactList
 */
export interface JsonApiFactList {
    /**
     *
     * @type {Array<JsonApiFactWithLinks>}
     * @memberof JsonApiFactList
     */
    data: Array<JsonApiFactWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiFactList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiDatasetWithLinks>}
     * @memberof JsonApiFactList
     */
    included?: Array<JsonApiDatasetWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiFactRelationships
 */
export interface JsonApiFactRelationships {
    /**
     *
     * @type {JsonApiUserGroupRelationshipsUserGroup}
     * @memberof JsonApiFactRelationships
     */
    dataset?: JsonApiUserGroupRelationshipsUserGroup;
}
/**
 *
 * @export
 * @interface JsonApiFactWithLinks
 */
export interface JsonApiFactWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFactWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFactWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiFactAttributes}
     * @memberof JsonApiFactWithLinks
     */
    attributes?: JsonApiFactAttributes;
    /**
     *
     * @type {JsonApiFactRelationships}
     * @memberof JsonApiFactWithLinks
     */
    relationships?: JsonApiFactRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFactWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of filterContext entity.
 * @export
 * @interface JsonApiFilterContext
 */
export interface JsonApiFilterContext {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContext
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContext
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardAttributes}
     * @memberof JsonApiFilterContext
     */
    attributes?: JsonApiAnalyticalDashboardAttributes;
    /**
     *
     * @type {JsonApiFilterContextRelationships}
     * @memberof JsonApiFilterContext
     */
    relationships?: JsonApiFilterContextRelationships;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextDocument
 */
export interface JsonApiFilterContextDocument {
    /**
     *
     * @type {JsonApiFilterContext}
     * @memberof JsonApiFilterContextDocument
     */
    data: JsonApiFilterContext;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFilterContextDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeWithLinks | JsonApiDatasetWithLinks | JsonApiLabelWithLinks>}
     * @memberof JsonApiFilterContextDocument
     */
    included?: Array<JsonApiAttributeWithLinks | JsonApiDatasetWithLinks | JsonApiLabelWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiFilterContextList
 */
export interface JsonApiFilterContextList {
    /**
     *
     * @type {Array<JsonApiFilterContextWithLinks>}
     * @memberof JsonApiFilterContextList
     */
    data: Array<JsonApiFilterContextWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiFilterContextList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeWithLinks | JsonApiDatasetWithLinks | JsonApiLabelWithLinks>}
     * @memberof JsonApiFilterContextList
     */
    included?: Array<JsonApiAttributeWithLinks | JsonApiDatasetWithLinks | JsonApiLabelWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextRelationships
 */
export interface JsonApiFilterContextRelationships {
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiFilterContextRelationships
     */
    attributes?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiFilterContextRelationships
     */
    datasets?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiFilterContextRelationships
     */
    labels?: JsonApiACLRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiFilterContextWithLinks
 */
export interface JsonApiFilterContextWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiFilterContextWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiFilterContextWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardAttributes}
     * @memberof JsonApiFilterContextWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardAttributes;
    /**
     *
     * @type {JsonApiFilterContextRelationships}
     * @memberof JsonApiFilterContextWithLinks
     */
    relationships?: JsonApiFilterContextRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiFilterContextWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of label entity.
 * @export
 * @interface JsonApiLabel
 */
export interface JsonApiLabel {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiLabel
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiLabel
     */
    type: string;
    /**
     *
     * @type {JsonApiLabelAttributes}
     * @memberof JsonApiLabel
     */
    attributes?: JsonApiLabelAttributes;
    /**
     *
     * @type {JsonApiLabelRelationships}
     * @memberof JsonApiLabel
     */
    relationships?: JsonApiLabelRelationships;
}
/**
 *
 * @export
 * @interface JsonApiLabelAttributes
 */
export interface JsonApiLabelAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiLabelAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof JsonApiLabelAttributes
     */
    primary?: boolean;
    /**
     *
     * @type {string}
     * @memberof JsonApiLabelAttributes
     */
    sourceColumn?: string;
}
/**
 *
 * @export
 * @interface JsonApiLabelDocument
 */
export interface JsonApiLabelDocument {
    /**
     *
     * @type {JsonApiLabel}
     * @memberof JsonApiLabelDocument
     */
    data: JsonApiLabel;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiLabelDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeWithLinks>}
     * @memberof JsonApiLabelDocument
     */
    included?: Array<JsonApiAttributeWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiLabelList
 */
export interface JsonApiLabelList {
    /**
     *
     * @type {Array<JsonApiLabelWithLinks>}
     * @memberof JsonApiLabelList
     */
    data: Array<JsonApiLabelWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiLabelList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiAttributeWithLinks>}
     * @memberof JsonApiLabelList
     */
    included?: Array<JsonApiAttributeWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiLabelRelationships
 */
export interface JsonApiLabelRelationships {
    /**
     *
     * @type {JsonApiUserGroupRelationshipsUserGroup}
     * @memberof JsonApiLabelRelationships
     */
    attribute?: JsonApiUserGroupRelationshipsUserGroup;
}
/**
 *
 * @export
 * @interface JsonApiLabelWithLinks
 */
export interface JsonApiLabelWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiLabelWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiLabelWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiLabelAttributes}
     * @memberof JsonApiLabelWithLinks
     */
    attributes?: JsonApiLabelAttributes;
    /**
     *
     * @type {JsonApiLabelRelationships}
     * @memberof JsonApiLabelWithLinks
     */
    relationships?: JsonApiLabelRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiLabelWithLinks
     */
    links?: ObjectLinks;
}
/**
 * The \\\"type\\\" and \\\"id\\\" to non-empty members.
 * @export
 * @interface JsonApiLinkage
 */
export interface JsonApiLinkage {
    /**
     *
     * @type {string}
     * @memberof JsonApiLinkage
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiLinkage
     */
    type: string;
}
/**
 * JSON:API representation of metric entity.
 * @export
 * @interface JsonApiMetric
 */
export interface JsonApiMetric {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetric
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetric
     */
    type: string;
    /**
     *
     * @type {JsonApiMetricAttributes}
     * @memberof JsonApiMetric
     */
    attributes?: JsonApiMetricAttributes;
    /**
     *
     * @type {JsonApiMetricRelationships}
     * @memberof JsonApiMetric
     */
    relationships?: JsonApiMetricRelationships;
}
/**
 *
 * @export
 * @interface JsonApiMetricAttributes
 */
export interface JsonApiMetricAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricAttributes
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricAttributes
     */
    description?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof JsonApiMetricAttributes
     */
    tags?: Array<string>;
    /**
     *
     * @type {JsonApiMetricAttributesContent}
     * @memberof JsonApiMetricAttributes
     */
    content?: JsonApiMetricAttributesContent;
}
/**
 *
 * @export
 * @interface JsonApiMetricAttributesContent
 */
export interface JsonApiMetricAttributesContent {
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricAttributesContent
     */
    format?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiMetricAttributesContent
     */
    maql?: string;
}
/**
 *
 * @export
 * @interface JsonApiMetricDocument
 */
export interface JsonApiMetricDocument {
    /**
     *
     * @type {JsonApiMetric}
     * @memberof JsonApiMetricDocument
     */
    data: JsonApiMetric;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiMetricDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFactWithLinks | JsonApiAttributeWithLinks | JsonApiLabelWithLinks | JsonApiMetricWithLinks>}
     * @memberof JsonApiMetricDocument
     */
    included?: Array<
        JsonApiFactWithLinks | JsonApiAttributeWithLinks | JsonApiLabelWithLinks | JsonApiMetricWithLinks
    >;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiMetricList
 */
export interface JsonApiMetricList {
    /**
     *
     * @type {Array<JsonApiMetricWithLinks>}
     * @memberof JsonApiMetricList
     */
    data: Array<JsonApiMetricWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiMetricList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFactWithLinks | JsonApiAttributeWithLinks | JsonApiLabelWithLinks | JsonApiMetricWithLinks>}
     * @memberof JsonApiMetricList
     */
    included?: Array<
        JsonApiFactWithLinks | JsonApiAttributeWithLinks | JsonApiLabelWithLinks | JsonApiMetricWithLinks
    >;
}
/**
 *
 * @export
 * @interface JsonApiMetricRelationships
 */
export interface JsonApiMetricRelationships {
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiMetricRelationships
     */
    facts?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiMetricRelationships
     */
    attributes?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiMetricRelationships
     */
    labels?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiMetricRelationships
     */
    metrics?: JsonApiACLRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiMetricWithLinks
 */
export interface JsonApiMetricWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiMetricWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiMetricWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiMetricAttributes}
     * @memberof JsonApiMetricWithLinks
     */
    attributes?: JsonApiMetricAttributes;
    /**
     *
     * @type {JsonApiMetricRelationships}
     * @memberof JsonApiMetricWithLinks
     */
    relationships?: JsonApiMetricRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiMetricWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of modelModule entity.
 * @export
 * @interface JsonApiModelModule
 */
export interface JsonApiModelModule {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiModelModule
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiModelModule
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiModelModule
     */
    attributes?: object;
}
/**
 *
 * @export
 * @interface JsonApiModelModuleDocument
 */
export interface JsonApiModelModuleDocument {
    /**
     *
     * @type {JsonApiModelModule}
     * @memberof JsonApiModelModuleDocument
     */
    data: JsonApiModelModule;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiModelModuleDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiModelModuleList
 */
export interface JsonApiModelModuleList {
    /**
     *
     * @type {Array<JsonApiModelModuleWithLinks>}
     * @memberof JsonApiModelModuleList
     */
    data: Array<JsonApiModelModuleWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiModelModuleList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiModelModuleWithLinks
 */
export interface JsonApiModelModuleWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiModelModuleWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiModelModuleWithLinks
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiModelModuleWithLinks
     */
    attributes?: object;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiModelModuleWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of organization entity.
 * @export
 * @interface JsonApiOrganization
 */
export interface JsonApiOrganization {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganization
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganization
     */
    type: string;
    /**
     *
     * @type {JsonApiOrganizationAttributes}
     * @memberof JsonApiOrganization
     */
    attributes?: JsonApiOrganizationAttributes;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationAttributes
 */
export interface JsonApiOrganizationAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationAttributes
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationAttributes
     */
    hostname?: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiOrganizationAttributes
     */
    oauthIssuerLocation?: string;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationDocument
 */
export interface JsonApiOrganizationDocument {
    /**
     *
     * @type {JsonApiOrganization}
     * @memberof JsonApiOrganizationDocument
     */
    data: JsonApiOrganization;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiOrganizationDocument
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiOrganizationList
 */
export interface JsonApiOrganizationList {
    /**
     *
     * @type {Array<JsonApiOrganizationWithLinks>}
     * @memberof JsonApiOrganizationList
     */
    data: Array<JsonApiOrganizationWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiOrganizationList
     */
    links?: ListLinks;
}
/**
 *
 * @export
 * @interface JsonApiOrganizationWithLinks
 */
export interface JsonApiOrganizationWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiOrganizationWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiOrganizationWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiOrganizationAttributes}
     * @memberof JsonApiOrganizationWithLinks
     */
    attributes?: JsonApiOrganizationAttributes;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiOrganizationWithLinks
     */
    links?: ObjectLinks;
}
/**
 * @type JsonApiRelToOne
 * References to other resource objects in a to-one (\\\"relationship\\\"). Relationships can be specified by including a member in a resource\'s links object.
 * @export
 */
export type JsonApiRelToOne = JsonApiLinkage;
/**
 * A source table
 * @export
 * @interface JsonApiSourceTable
 */
export interface JsonApiSourceTable {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiSourceTable
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiSourceTable
     */
    type: string;
    /**
     *
     * @type {JsonApiSourceTableAttributes}
     * @memberof JsonApiSourceTable
     */
    attributes?: JsonApiSourceTableAttributes;
    /**
     *
     * @type {JsonApiSourceTableRelationships}
     * @memberof JsonApiSourceTable
     */
    relationships?: JsonApiSourceTableRelationships;
}
/**
 *
 * @export
 * @interface JsonApiSourceTableAttributes
 */
export interface JsonApiSourceTableAttributes {
    /**
     *
     * @type {Array<JsonApiSourceTableAttributesColumns>}
     * @memberof JsonApiSourceTableAttributes
     */
    columns?: Array<JsonApiSourceTableAttributesColumns>;
}
/**
 * A source table column
 * @export
 * @interface JsonApiSourceTableAttributesColumns
 */
export interface JsonApiSourceTableAttributesColumns {
    /**
     *
     * @type {string}
     * @memberof JsonApiSourceTableAttributesColumns
     */
    name: string;
    /**
     *
     * @type {string}
     * @memberof JsonApiSourceTableAttributesColumns
     */
    dataType: JsonApiSourceTableAttributesColumnsDataTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum JsonApiSourceTableAttributesColumnsDataTypeEnum {
    INT = "INT",
    STRING = "STRING",
    DATE = "DATE",
    NUMERIC = "NUMERIC",
    TIMESTAMP = "TIMESTAMP",
    BOOLEAN = "BOOLEAN",
}

/**
 *
 * @export
 * @interface JsonApiSourceTableDocument
 */
export interface JsonApiSourceTableDocument {
    /**
     *
     * @type {JsonApiSourceTable}
     * @memberof JsonApiSourceTableDocument
     */
    data: JsonApiSourceTable;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiSourceTableDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiSourceTablesWithLinks>}
     * @memberof JsonApiSourceTableDocument
     */
    included?: Array<JsonApiSourceTablesWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiSourceTableList
 */
export interface JsonApiSourceTableList {
    /**
     *
     * @type {Array<JsonApiSourceTableWithLinks>}
     * @memberof JsonApiSourceTableList
     */
    data: Array<JsonApiSourceTableWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiSourceTableList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiSourceTablesWithLinks>}
     * @memberof JsonApiSourceTableList
     */
    included?: Array<JsonApiSourceTablesWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiSourceTableRelationships
 */
export interface JsonApiSourceTableRelationships {
    /**
     *
     * @type {JsonApiUserGroupRelationshipsUserGroup}
     * @memberof JsonApiSourceTableRelationships
     */
    source?: JsonApiUserGroupRelationshipsUserGroup;
}
/**
 *
 * @export
 * @interface JsonApiSourceTableWithLinks
 */
export interface JsonApiSourceTableWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiSourceTableWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiSourceTableWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiSourceTableAttributes}
     * @memberof JsonApiSourceTableWithLinks
     */
    attributes?: JsonApiSourceTableAttributes;
    /**
     *
     * @type {JsonApiSourceTableRelationships}
     * @memberof JsonApiSourceTableWithLinks
     */
    relationships?: JsonApiSourceTableRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiSourceTableWithLinks
     */
    links?: ObjectLinks;
}
/**
 * A defined data source for analytics data
 * @export
 * @interface JsonApiSourceTables
 */
export interface JsonApiSourceTables {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiSourceTables
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiSourceTables
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiSourceTables
     */
    attributes?: object;
    /**
     *
     * @type {JsonApiSourceTablesRelationships}
     * @memberof JsonApiSourceTables
     */
    relationships?: JsonApiSourceTablesRelationships;
}
/**
 *
 * @export
 * @interface JsonApiSourceTablesDocument
 */
export interface JsonApiSourceTablesDocument {
    /**
     *
     * @type {JsonApiSourceTables}
     * @memberof JsonApiSourceTablesDocument
     */
    data: JsonApiSourceTables;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiSourceTablesDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiSourceTableWithLinks>}
     * @memberof JsonApiSourceTablesDocument
     */
    included?: Array<JsonApiSourceTableWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiSourceTablesList
 */
export interface JsonApiSourceTablesList {
    /**
     *
     * @type {Array<JsonApiSourceTablesWithLinks>}
     * @memberof JsonApiSourceTablesList
     */
    data: Array<JsonApiSourceTablesWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiSourceTablesList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiSourceTableWithLinks>}
     * @memberof JsonApiSourceTablesList
     */
    included?: Array<JsonApiSourceTableWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiSourceTablesRelationships
 */
export interface JsonApiSourceTablesRelationships {
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiSourceTablesRelationships
     */
    tables?: JsonApiACLRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiSourceTablesWithLinks
 */
export interface JsonApiSourceTablesWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiSourceTablesWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiSourceTablesWithLinks
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiSourceTablesWithLinks
     */
    attributes?: object;
    /**
     *
     * @type {JsonApiSourceTablesRelationships}
     * @memberof JsonApiSourceTablesWithLinks
     */
    relationships?: JsonApiSourceTablesRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiSourceTablesWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of user entity.
 * @export
 * @interface JsonApiUser
 */
export interface JsonApiUser {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUser
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUser
     */
    type: string;
    /**
     *
     * @type {JsonApiUserAttributes}
     * @memberof JsonApiUser
     */
    attributes?: JsonApiUserAttributes;
    /**
     *
     * @type {JsonApiUserGroupRelationships}
     * @memberof JsonApiUser
     */
    relationships?: JsonApiUserGroupRelationships;
}
/**
 *
 * @export
 * @interface JsonApiUserAttributes
 */
export interface JsonApiUserAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiUserAttributes
     */
    authenticationId?: string;
}
/**
 *
 * @export
 * @interface JsonApiUserDocument
 */
export interface JsonApiUserDocument {
    /**
     *
     * @type {JsonApiUser}
     * @memberof JsonApiUserDocument
     */
    data: JsonApiUser;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupWithLinks | JsonApiACLWithLinks>}
     * @memberof JsonApiUserDocument
     */
    included?: Array<JsonApiUserGroupWithLinks | JsonApiACLWithLinks>;
}
/**
 * JSON:API representation of userGroup entity.
 * @export
 * @interface JsonApiUserGroup
 */
export interface JsonApiUserGroup {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroup
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroup
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiUserGroup
     */
    attributes?: object;
    /**
     *
     * @type {JsonApiUserGroupRelationships}
     * @memberof JsonApiUserGroup
     */
    relationships?: JsonApiUserGroupRelationships;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupDocument
 */
export interface JsonApiUserGroupDocument {
    /**
     *
     * @type {JsonApiUserGroup}
     * @memberof JsonApiUserGroupDocument
     */
    data: JsonApiUserGroup;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserGroupDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupWithLinks | JsonApiACLWithLinks>}
     * @memberof JsonApiUserGroupDocument
     */
    included?: Array<JsonApiUserGroupWithLinks | JsonApiACLWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserGroupList
 */
export interface JsonApiUserGroupList {
    /**
     *
     * @type {Array<JsonApiUserGroupWithLinks>}
     * @memberof JsonApiUserGroupList
     */
    data: Array<JsonApiUserGroupWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserGroupList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupWithLinks | JsonApiACLWithLinks>}
     * @memberof JsonApiUserGroupList
     */
    included?: Array<JsonApiUserGroupWithLinks | JsonApiACLWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupRelationships
 */
export interface JsonApiUserGroupRelationships {
    /**
     *
     * @type {JsonApiUserGroupRelationshipsUserGroup}
     * @memberof JsonApiUserGroupRelationships
     */
    userGroup?: JsonApiUserGroupRelationshipsUserGroup;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiUserGroupRelationships
     */
    acls?: JsonApiACLRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupRelationshipsUserGroup
 */
export interface JsonApiUserGroupRelationshipsUserGroup {
    /**
     *
     * @type {JsonApiRelToOne}
     * @memberof JsonApiUserGroupRelationshipsUserGroup
     */
    data?: JsonApiRelToOne | null;
}
/**
 *
 * @export
 * @interface JsonApiUserGroupWithLinks
 */
export interface JsonApiUserGroupWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserGroupWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserGroupWithLinks
     */
    type: string;
    /**
     *
     * @type {object}
     * @memberof JsonApiUserGroupWithLinks
     */
    attributes?: object;
    /**
     *
     * @type {JsonApiUserGroupRelationships}
     * @memberof JsonApiUserGroupWithLinks
     */
    relationships?: JsonApiUserGroupRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserGroupWithLinks
     */
    links?: ObjectLinks;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiUserList
 */
export interface JsonApiUserList {
    /**
     *
     * @type {Array<JsonApiUserWithLinks>}
     * @memberof JsonApiUserList
     */
    data: Array<JsonApiUserWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiUserList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiUserGroupWithLinks | JsonApiACLWithLinks>}
     * @memberof JsonApiUserList
     */
    included?: Array<JsonApiUserGroupWithLinks | JsonApiACLWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiUserWithLinks
 */
export interface JsonApiUserWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiUserWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiUserWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiUserAttributes}
     * @memberof JsonApiUserWithLinks
     */
    attributes?: JsonApiUserAttributes;
    /**
     *
     * @type {JsonApiUserGroupRelationships}
     * @memberof JsonApiUserWithLinks
     */
    relationships?: JsonApiUserGroupRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiUserWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of visualizationObject entity.
 * @export
 * @interface JsonApiVisualizationObject
 */
export interface JsonApiVisualizationObject {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObject
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObject
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardAttributes}
     * @memberof JsonApiVisualizationObject
     */
    attributes?: JsonApiAnalyticalDashboardAttributes;
    /**
     *
     * @type {JsonApiVisualizationObjectRelationships}
     * @memberof JsonApiVisualizationObject
     */
    relationships?: JsonApiVisualizationObjectRelationships;
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectDocument
 */
export interface JsonApiVisualizationObjectDocument {
    /**
     *
     * @type {JsonApiVisualizationObject}
     * @memberof JsonApiVisualizationObjectDocument
     */
    data: JsonApiVisualizationObject;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiVisualizationObjectDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFactWithLinks | JsonApiAttributeWithLinks | JsonApiLabelWithLinks | JsonApiMetricWithLinks | JsonApiAnalyticalDashboardWithLinks | JsonApiDatasetWithLinks>}
     * @memberof JsonApiVisualizationObjectDocument
     */
    included?: Array<
        | JsonApiFactWithLinks
        | JsonApiAttributeWithLinks
        | JsonApiLabelWithLinks
        | JsonApiMetricWithLinks
        | JsonApiAnalyticalDashboardWithLinks
        | JsonApiDatasetWithLinks
    >;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiVisualizationObjectList
 */
export interface JsonApiVisualizationObjectList {
    /**
     *
     * @type {Array<JsonApiVisualizationObjectWithLinks>}
     * @memberof JsonApiVisualizationObjectList
     */
    data: Array<JsonApiVisualizationObjectWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiVisualizationObjectList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiFactWithLinks | JsonApiAttributeWithLinks | JsonApiLabelWithLinks | JsonApiMetricWithLinks | JsonApiAnalyticalDashboardWithLinks | JsonApiDatasetWithLinks>}
     * @memberof JsonApiVisualizationObjectList
     */
    included?: Array<
        | JsonApiFactWithLinks
        | JsonApiAttributeWithLinks
        | JsonApiLabelWithLinks
        | JsonApiMetricWithLinks
        | JsonApiAnalyticalDashboardWithLinks
        | JsonApiDatasetWithLinks
    >;
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectRelationships
 */
export interface JsonApiVisualizationObjectRelationships {
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiVisualizationObjectRelationships
     */
    facts?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiVisualizationObjectRelationships
     */
    attributes?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiVisualizationObjectRelationships
     */
    labels?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiVisualizationObjectRelationships
     */
    metrics?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiVisualizationObjectRelationships
     */
    analyticalDashboards?: JsonApiACLRelationshipsUsers;
    /**
     *
     * @type {JsonApiACLRelationshipsUsers}
     * @memberof JsonApiVisualizationObjectRelationships
     */
    datasets?: JsonApiACLRelationshipsUsers;
}
/**
 *
 * @export
 * @interface JsonApiVisualizationObjectWithLinks
 */
export interface JsonApiVisualizationObjectWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiVisualizationObjectWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiVisualizationObjectWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiAnalyticalDashboardAttributes}
     * @memberof JsonApiVisualizationObjectWithLinks
     */
    attributes?: JsonApiAnalyticalDashboardAttributes;
    /**
     *
     * @type {JsonApiVisualizationObjectRelationships}
     * @memberof JsonApiVisualizationObjectWithLinks
     */
    relationships?: JsonApiVisualizationObjectRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiVisualizationObjectWithLinks
     */
    links?: ObjectLinks;
}
/**
 * JSON:API representation of workspace entity.
 * @export
 * @interface JsonApiWorkspace
 */
export interface JsonApiWorkspace {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspace
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspace
     */
    type: string;
    /**
     *
     * @type {JsonApiWorkspaceAttributes}
     * @memberof JsonApiWorkspace
     */
    attributes?: JsonApiWorkspaceAttributes;
    /**
     *
     * @type {JsonApiWorkspaceRelationships}
     * @memberof JsonApiWorkspace
     */
    relationships?: JsonApiWorkspaceRelationships;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceAttributes
 */
export interface JsonApiWorkspaceAttributes {
    /**
     *
     * @type {string}
     * @memberof JsonApiWorkspaceAttributes
     */
    name?: string;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceDocument
 */
export interface JsonApiWorkspaceDocument {
    /**
     *
     * @type {JsonApiWorkspace}
     * @memberof JsonApiWorkspaceDocument
     */
    data: JsonApiWorkspace;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceDocument
     */
    links?: ObjectLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceWithLinks>}
     * @memberof JsonApiWorkspaceDocument
     */
    included?: Array<JsonApiWorkspaceWithLinks>;
}
/**
 * A JSON:API document with a list of resources
 * @export
 * @interface JsonApiWorkspaceList
 */
export interface JsonApiWorkspaceList {
    /**
     *
     * @type {Array<JsonApiWorkspaceWithLinks>}
     * @memberof JsonApiWorkspaceList
     */
    data: Array<JsonApiWorkspaceWithLinks>;
    /**
     *
     * @type {ListLinks}
     * @memberof JsonApiWorkspaceList
     */
    links?: ListLinks;
    /**
     * Included resources
     * @type {Array<JsonApiWorkspaceWithLinks>}
     * @memberof JsonApiWorkspaceList
     */
    included?: Array<JsonApiWorkspaceWithLinks>;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceRelationships
 */
export interface JsonApiWorkspaceRelationships {
    /**
     *
     * @type {JsonApiUserGroupRelationshipsUserGroup}
     * @memberof JsonApiWorkspaceRelationships
     */
    workspace?: JsonApiUserGroupRelationshipsUserGroup;
}
/**
 *
 * @export
 * @interface JsonApiWorkspaceWithLinks
 */
export interface JsonApiWorkspaceWithLinks {
    /**
     * API identifier of an object
     * @type {string}
     * @memberof JsonApiWorkspaceWithLinks
     */
    id: string;
    /**
     * Object type
     * @type {string}
     * @memberof JsonApiWorkspaceWithLinks
     */
    type: string;
    /**
     *
     * @type {JsonApiWorkspaceAttributes}
     * @memberof JsonApiWorkspaceWithLinks
     */
    attributes?: JsonApiWorkspaceAttributes;
    /**
     *
     * @type {JsonApiWorkspaceRelationships}
     * @memberof JsonApiWorkspaceWithLinks
     */
    relationships?: JsonApiWorkspaceRelationships;
    /**
     *
     * @type {ObjectLinks}
     * @memberof JsonApiWorkspaceWithLinks
     */
    links?: ObjectLinks;
}
/**
 *
 * @export
 * @interface Link
 */
export interface Link {
    /**
     *
     * @type {string}
     * @memberof Link
     */
    href?: string;
    /**
     *
     * @type {string}
     * @memberof Link
     */
    hreflang?: string;
    /**
     *
     * @type {string}
     * @memberof Link
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof Link
     */
    type?: string;
    /**
     *
     * @type {string}
     * @memberof Link
     */
    deprecation?: string;
    /**
     *
     * @type {string}
     * @memberof Link
     */
    profile?: string;
    /**
     *
     * @type {string}
     * @memberof Link
     */
    name?: string;
    /**
     *
     * @type {boolean}
     * @memberof Link
     */
    templated?: boolean;
}
/**
 *
 * @export
 * @interface ListLinks
 */
export interface ListLinks {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof ListLinks
     */
    self: string;
    /**
     * A string containing the link\'s URL for the next page of data.
     * @type {string}
     * @memberof ListLinks
     */
    next?: string;
}
/**
 *
 * @export
 * @interface ListLinksAllOf
 */
export interface ListLinksAllOf {
    /**
     * A string containing the link\'s URL for the next page of data.
     * @type {string}
     * @memberof ListLinksAllOf
     */
    next?: string;
}
/**
 *
 * @export
 * @interface ObjectLinks
 */
export interface ObjectLinks {
    /**
     * A string containing the link\'s URL.
     * @type {string}
     * @memberof ObjectLinks
     */
    self: string;
}
/**
 *
 * @export
 * @interface ObjectLinksContainer
 */
export interface ObjectLinksContainer {
    /**
     *
     * @type {ObjectLinks}
     * @memberof ObjectLinksContainer
     */
    links?: ObjectLinks;
}
/**
 *
 * @export
 * @interface Organization
 */
export interface Organization {
    /**
     *
     * @type {StockIdNoneScope}
     * @memberof Organization
     */
    stockId: StockIdNoneScope;
    /**
     *
     * @type {string}
     * @memberof Organization
     */
    name?: string;
    /**
     *
     * @type {string}
     * @memberof Organization
     */
    hostname?: string;
    /**
     *
     * @type {string}
     * @memberof Organization
     */
    oauthIssuerLocation?: string;
    /**
     *
     * @type {string}
     * @memberof Organization
     */
    id?: string;
}
/**
 *
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    organisationId: string;
    /**
     *
     * @type {string}
     * @memberof Profile
     */
    userId: string;
}
/**
 * A reference identifier.
 * @export
 * @interface ReferenceIdentifier
 */
export interface ReferenceIdentifier {
    /**
     * Reference ID.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    id: string;
    /**
     * A type of the reference.
     * @type {string}
     * @memberof ReferenceIdentifier
     */
    type: ReferenceIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum ReferenceIdentifierTypeEnum {
    Dataset = "dataset",
}

/**
 *
 * @export
 * @interface RepresentationModel
 */
export interface RepresentationModel {
    /**
     *
     * @type {Array<Link>}
     * @memberof RepresentationModel
     */
    _links?: Array<Link>;
}
/**
 *
 * @export
 * @interface RepresentationModelObject
 */
export interface RepresentationModelObject {
    /**
     *
     * @type {Array<Link>}
     * @memberof RepresentationModelObject
     */
    _links?: Array<Link>;
}
/**
 *
 * @export
 * @interface StockIdNoneScope
 */
export interface StockIdNoneScope {
    /**
     *
     * @type {string}
     * @memberof StockIdNoneScope
     */
    apiId: string;
    /**
     *
     * @type {object}
     * @memberof StockIdNoneScope
     */
    scope?: object;
}
/**
 *
 * @export
 * @interface WorkspaceIdentifier
 */
export interface WorkspaceIdentifier {
    /**
     *
     * @type {string}
     * @memberof WorkspaceIdentifier
     */
    id: string;
    /**
     *
     * @type {string}
     * @memberof WorkspaceIdentifier
     */
    type: WorkspaceIdentifierTypeEnum;
}

/**
 * @export
 * @enum {string}
 */
export enum WorkspaceIdentifierTypeEnum {
    Workspace = "workspace",
}

/**
 * DeclarativeLayoutControllerApi - axios parameter creator
 * @export
 */
export const DeclarativeLayoutControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getAnalyticsModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/analytics-model`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getLogicalModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/logical-model`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getWorkspaceLayout.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve layout of workspaces, including a hierarchy and models.
         * @summary Get all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set complete layout of workspace, like model, ACLs, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout(
            params: {
                workspaceId: string;
                declarativeWorkspaceModel: DeclarativeWorkspaceModel;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, declarativeWorkspaceModel } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling putWorkspaceLayout.",
                );
            }
            // verify required parameter 'declarativeWorkspaceModel' is not null or undefined
            if (declarativeWorkspaceModel === null || declarativeWorkspaceModel === undefined) {
                throw new RequiredError(
                    "declarativeWorkspaceModel",
                    "Required parameter declarativeWorkspaceModel was null or undefined when calling putWorkspaceLayout.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeWorkspaceModel !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeWorkspaceModel !== undefined ? declarativeWorkspaceModel : {})
                : declarativeWorkspaceModel || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel(
            params: {
                workspaceId: string;
                declarativeAnalytics: DeclarativeAnalytics;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, declarativeAnalytics } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling setAnalyticsModel.",
                );
            }
            // verify required parameter 'declarativeAnalytics' is not null or undefined
            if (declarativeAnalytics === null || declarativeAnalytics === undefined) {
                throw new RequiredError(
                    "declarativeAnalytics",
                    "Required parameter declarativeAnalytics was null or undefined when calling setAnalyticsModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/analytics-model`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeAnalytics !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeAnalytics !== undefined ? declarativeAnalytics : {})
                : declarativeAnalytics || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel(
            params: {
                workspaceId: string;
                declarativeModel: DeclarativeModel;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, declarativeModel } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling setLogicalModel.",
                );
            }
            // verify required parameter 'declarativeModel' is not null or undefined
            if (declarativeModel === null || declarativeModel === undefined) {
                throw new RequiredError(
                    "declarativeModel",
                    "Required parameter declarativeModel was null or undefined when calling setLogicalModel.",
                );
            }
            const localVarPath = `/api/layout/workspaces/{workspaceId}/logical-model`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeModel !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeModel !== undefined ? declarativeModel : {})
                : declarativeModel || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/layout/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {DeclarativeWorkspaces} declarativeWorkspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout(
            params: {
                declarativeWorkspaces: DeclarativeWorkspaces;
            },
            options: any = {},
        ): RequestArgs {
            const { declarativeWorkspaces } = params;
            // verify required parameter 'declarativeWorkspaces' is not null or undefined
            if (declarativeWorkspaces === null || declarativeWorkspaces === undefined) {
                throw new RequiredError(
                    "declarativeWorkspaces",
                    "Required parameter declarativeWorkspaces was null or undefined when calling setWorkspacesLayout.",
                );
            }
            const localVarPath = `/api/layout/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof declarativeWorkspaces !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(declarativeWorkspaces !== undefined ? declarativeWorkspaces : {})
                : declarativeWorkspaces || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * DeclarativeLayoutControllerApi - functional programming interface
 * @export
 */
export const DeclarativeLayoutControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeAnalytics> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getAnalyticsModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeModel> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getLogicalModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getOrganizationLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaceModel> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getWorkspaceLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve layout of workspaces, including a hierarchy and models.
         * @summary Get all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeclarativeWorkspaces> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).getWorkspacesLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set complete layout of workspace, like model, ACLs, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout(
            params: {
                workspaceId: string;
                declarativeWorkspaceModel: DeclarativeWorkspaceModel;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).putWorkspaceLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel(
            params: {
                workspaceId: string;
                declarativeAnalytics: DeclarativeAnalytics;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setAnalyticsModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel(
            params: {
                workspaceId: string;
                declarativeModel: DeclarativeModel;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setLogicalModel(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setOrganizationLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {DeclarativeWorkspaces} declarativeWorkspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout(
            params: {
                declarativeWorkspaces: DeclarativeWorkspaces;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = DeclarativeLayoutControllerApiAxiosParamCreator(
                configuration,
            ).setWorkspacesLayout(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * DeclarativeLayoutControllerApi - factory interface
 * @export
 */
export const DeclarativeLayoutControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Retrieve current analytics model of the workspace.
         * @summary Get analytics model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAnalyticsModel(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<DeclarativeAnalytics> {
            return DeclarativeLayoutControllerApiFp(configuration).getAnalyticsModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve current logical model of the workspace in declarative form.
         * @summary Get logical model
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLogicalModel(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<DeclarativeModel> {
            return DeclarativeLayoutControllerApiFp(configuration).getLogicalModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve complete layout of organization, workspaces, user-groups, etc.
         * @summary Get organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationLayout(params: {}, options?: any): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).getOrganizationLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve current model of the workspace in declarative form.
         * @summary Get workspace layout
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspaceLayout(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<DeclarativeWorkspaceModel> {
            return DeclarativeLayoutControllerApiFp(configuration).getWorkspaceLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Retrieve layout of workspaces, including a hierarchy and models.
         * @summary Get all workspaces layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorkspacesLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaces> {
            return DeclarativeLayoutControllerApiFp(configuration).getWorkspacesLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Set complete layout of workspace, like model, ACLs, etc.
         * @summary Set workspace layout
         * @param {string} workspaceId
         * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWorkspaceLayout(
            params: {
                workspaceId: string;
                declarativeWorkspaceModel: DeclarativeWorkspaceModel;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).putWorkspaceLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Set effective analytics model of the workspace.
         * @summary Set analytics model
         * @param {string} workspaceId
         * @param {DeclarativeAnalytics} declarativeAnalytics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAnalyticsModel(
            params: {
                workspaceId: string;
                declarativeAnalytics: DeclarativeAnalytics;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setAnalyticsModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Set effective logical model of the workspace.
         * @summary Set logical model
         * @param {string} workspaceId
         * @param {DeclarativeModel} declarativeModel
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setLogicalModel(
            params: {
                workspaceId: string;
                declarativeModel: DeclarativeModel;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setLogicalModel(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Sets complete layout of organization, like workspaces, user-groups, etc.
         * @summary Set organization layout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrganizationLayout(params: {}, options?: any): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setOrganizationLayout(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Sets complete layout of workspaces, their hierarchy, models.
         * @summary Set all workspaces layout
         * @param {DeclarativeWorkspaces} declarativeWorkspaces
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setWorkspacesLayout(
            params: {
                declarativeWorkspaces: DeclarativeWorkspaces;
            },
            options?: any,
        ): AxiosPromise<void> {
            return DeclarativeLayoutControllerApiFp(configuration).setWorkspacesLayout(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * DeclarativeLayoutControllerApi - interface
 * @export
 * @interface DeclarativeLayoutControllerApi
 */
export interface DeclarativeLayoutControllerApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getAnalyticsModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<DeclarativeAnalytics>;

    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getLogicalModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<DeclarativeModel>;

    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getOrganizationLayout(params: {}, options?: any): AxiosPromise<void>;

    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getWorkspaceLayout(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<DeclarativeWorkspaceModel>;

    /**
     * Retrieve layout of workspaces, including a hierarchy and models.
     * @summary Get all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    getWorkspacesLayout(params: {}, options?: any): AxiosPromise<DeclarativeWorkspaces>;

    /**
     * Set complete layout of workspace, like model, ACLs, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    putWorkspaceLayout(
        params: {
            workspaceId: string;
            declarativeWorkspaceModel: DeclarativeWorkspaceModel;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setAnalyticsModel(
        params: {
            workspaceId: string;
            declarativeAnalytics: DeclarativeAnalytics;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setLogicalModel(
        params: {
            workspaceId: string;
            declarativeModel: DeclarativeModel;
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setOrganizationLayout(params: {}, options?: any): AxiosPromise<void>;

    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApiInterface
     */
    setWorkspacesLayout(
        params: {
            declarativeWorkspaces: DeclarativeWorkspaces;
        },
        options?: any,
    ): AxiosPromise<void>;
}

/**
 * DeclarativeLayoutControllerApi - object-oriented interface
 * @export
 * @class DeclarativeLayoutControllerApi
 * @extends {BaseAPI}
 */
export class DeclarativeLayoutControllerApi extends BaseAPI
    implements DeclarativeLayoutControllerApiInterface {
    /**
     * Retrieve current analytics model of the workspace.
     * @summary Get analytics model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getAnalyticsModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getAnalyticsModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve current logical model of the workspace in declarative form.
     * @summary Get logical model
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getLogicalModel(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getLogicalModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve complete layout of organization, workspaces, user-groups, etc.
     * @summary Get organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getOrganizationLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getOrganizationLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve current model of the workspace in declarative form.
     * @summary Get workspace layout
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getWorkspaceLayout(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getWorkspaceLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieve layout of workspaces, including a hierarchy and models.
     * @summary Get all workspaces layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public getWorkspacesLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).getWorkspacesLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Set complete layout of workspace, like model, ACLs, etc.
     * @summary Set workspace layout
     * @param {string} workspaceId
     * @param {DeclarativeWorkspaceModel} declarativeWorkspaceModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public putWorkspaceLayout(
        params: {
            workspaceId: string;
            declarativeWorkspaceModel: DeclarativeWorkspaceModel;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).putWorkspaceLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Set effective analytics model of the workspace.
     * @summary Set analytics model
     * @param {string} workspaceId
     * @param {DeclarativeAnalytics} declarativeAnalytics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setAnalyticsModel(
        params: {
            workspaceId: string;
            declarativeAnalytics: DeclarativeAnalytics;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setAnalyticsModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Set effective logical model of the workspace.
     * @summary Set logical model
     * @param {string} workspaceId
     * @param {DeclarativeModel} declarativeModel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setLogicalModel(
        params: {
            workspaceId: string;
            declarativeModel: DeclarativeModel;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setLogicalModel(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Sets complete layout of organization, like workspaces, user-groups, etc.
     * @summary Set organization layout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setOrganizationLayout(params: {}, options?: any) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setOrganizationLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Sets complete layout of workspaces, their hierarchy, models.
     * @summary Set all workspaces layout
     * @param {DeclarativeWorkspaces} declarativeWorkspaces
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeclarativeLayoutControllerApi
     */
    public setWorkspacesLayout(
        params: {
            declarativeWorkspaces: DeclarativeWorkspaces;
        },
        options?: any,
    ) {
        return DeclarativeLayoutControllerApiFp(this.configuration).setWorkspacesLayout(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * NotificationControllerApi - axios parameter creator
 * @export
 */
export const NotificationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification(
            params: {
                dataSourceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { dataSourceId } = params;
            // verify required parameter 'dataSourceId' is not null or undefined
            if (dataSourceId === null || dataSourceId === undefined) {
                throw new RequiredError(
                    "dataSourceId",
                    "Required parameter dataSourceId was null or undefined when calling registerUploadNotification.",
                );
            }
            const localVarPath = `/api/data-sources/{dataSourceId}/upload-notification`.replace(
                `{${"dataSourceId"}}`,
                encodeURIComponent(String(dataSourceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * NotificationControllerApi - functional programming interface
 * @export
 */
export const NotificationControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification(
            params: {
                dataSourceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = NotificationControllerApiAxiosParamCreator(
                configuration,
            ).registerUploadNotification(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * NotificationControllerApi - factory interface
 * @export
 */
export const NotificationControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Notification sets up all reports to be computed again with new data.
         * @summary Register an upload notification
         * @param {string} dataSourceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUploadNotification(
            params: {
                dataSourceId: string;
            },
            options?: any,
        ): AxiosPromise<void> {
            return NotificationControllerApiFp(configuration).registerUploadNotification(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * NotificationControllerApi - interface
 * @export
 * @interface NotificationControllerApi
 */
export interface NotificationControllerApiInterface {
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApiInterface
     */
    registerUploadNotification(
        params: {
            dataSourceId: string;
        },
        options?: any,
    ): AxiosPromise<void>;
}

/**
 * NotificationControllerApi - object-oriented interface
 * @export
 * @class NotificationControllerApi
 * @extends {BaseAPI}
 */
export class NotificationControllerApi extends BaseAPI implements NotificationControllerApiInterface {
    /**
     * Notification sets up all reports to be computed again with new data.
     * @summary Register an upload notification
     * @param {string} dataSourceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NotificationControllerApi
     */
    public registerUploadNotification(
        params: {
            dataSourceId: string;
        },
        options?: any,
    ) {
        return NotificationControllerApiFp(this.configuration).registerUploadNotification(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * OptionsControllerApi - axios parameter creator
 * @export
 */
export const OptionsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/options`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/options/available-drivers`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * OptionsControllerApi - functional programming interface
 * @export
 */
export const OptionsControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OptionsControllerApiAxiosParamCreator(configuration).getAllOptions(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OptionsControllerApiAxiosParamCreator(
                configuration,
            ).getDataSourceDrivers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * OptionsControllerApi - factory interface
 * @export
 */
export const OptionsControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Retrieves links for all options for different configurations.
         * @summary Links for all configuration options
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllOptions(params: {}, options?: any): AxiosPromise<void> {
            return OptionsControllerApiFp(configuration).getAllOptions(params, options)(axios, basePath);
        },
        /**
         * Retrieves a list of all supported data sources along with information about the used drivers.
         * @summary Get all available data source drivers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataSourceDrivers(params: {}, options?: any): AxiosPromise<void> {
            return OptionsControllerApiFp(configuration).getDataSourceDrivers(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * OptionsControllerApi - interface
 * @export
 * @interface OptionsControllerApi
 */
export interface OptionsControllerApiInterface {
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApiInterface
     */
    getAllOptions(params: {}, options?: any): AxiosPromise<void>;

    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApiInterface
     */
    getDataSourceDrivers(params: {}, options?: any): AxiosPromise<void>;
}

/**
 * OptionsControllerApi - object-oriented interface
 * @export
 * @class OptionsControllerApi
 * @extends {BaseAPI}
 */
export class OptionsControllerApi extends BaseAPI implements OptionsControllerApiInterface {
    /**
     * Retrieves links for all options for different configurations.
     * @summary Links for all configuration options
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApi
     */
    public getAllOptions(params: {}, options?: any) {
        return OptionsControllerApiFp(this.configuration).getAllOptions(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Retrieves a list of all supported data sources along with information about the used drivers.
     * @summary Get all available data source drivers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OptionsControllerApi
     */
    public getDataSourceDrivers(params: {}, options?: any) {
        return OptionsControllerApiFp(this.configuration).getDataSourceDrivers(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * OrganizationControllerApi - axios parameter creator
 * @export
 */
export const OrganizationControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Completely remove and discontinue the organization.
         * @summary Drop organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dropOrganization(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a basic information about organization.
         * @summary Get organization info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/api/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets a basic information about organization.
         * @summary Update organization info
         * @param {Organization} organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization(
            params: {
                organization: Organization;
            },
            options: any = {},
        ): RequestArgs {
            const { organization } = params;
            // verify required parameter 'organization' is not null or undefined
            if (organization === null || organization === undefined) {
                throw new RequiredError(
                    "organization",
                    "Required parameter organization was null or undefined when calling updateOrganization.",
                );
            }
            const localVarPath = `/api/organization`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof organization !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(organization !== undefined ? organization : {})
                : organization || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * OrganizationControllerApi - functional programming interface
 * @export
 */
export const OrganizationControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         * Completely remove and discontinue the organization.
         * @summary Drop organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dropOrganization(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = OrganizationControllerApiAxiosParamCreator(
                configuration,
            ).dropOrganization(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a basic information about organization.
         * @summary Get organization info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization> {
            const localVarAxiosArgs = OrganizationControllerApiAxiosParamCreator(
                configuration,
            ).getOrganization(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sets a basic information about organization.
         * @summary Update organization info
         * @param {Organization} organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization(
            params: {
                organization: Organization;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<object> {
            const localVarAxiosArgs = OrganizationControllerApiAxiosParamCreator(
                configuration,
            ).updateOrganization(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * OrganizationControllerApi - factory interface
 * @export
 */
export const OrganizationControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         * Completely remove and discontinue the organization.
         * @summary Drop organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dropOrganization(params: {}, options?: any): AxiosPromise<object> {
            return OrganizationControllerApiFp(configuration).dropOrganization(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Gets a basic information about organization.
         * @summary Get organization info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganization(params: {}, options?: any): AxiosPromise<Organization> {
            return OrganizationControllerApiFp(configuration).getOrganization(params, options)(
                axios,
                basePath,
            );
        },
        /**
         * Sets a basic information about organization.
         * @summary Update organization info
         * @param {Organization} organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrganization(
            params: {
                organization: Organization;
            },
            options?: any,
        ): AxiosPromise<object> {
            return OrganizationControllerApiFp(configuration).updateOrganization(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * OrganizationControllerApi - interface
 * @export
 * @interface OrganizationControllerApi
 */
export interface OrganizationControllerApiInterface {
    /**
     * Completely remove and discontinue the organization.
     * @summary Drop organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    dropOrganization(params: {}, options?: any): AxiosPromise<object>;

    /**
     * Gets a basic information about organization.
     * @summary Get organization info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    getOrganization(params: {}, options?: any): AxiosPromise<Organization>;

    /**
     * Sets a basic information about organization.
     * @summary Update organization info
     * @param {Organization} organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApiInterface
     */
    updateOrganization(
        params: {
            organization: Organization;
        },
        options?: any,
    ): AxiosPromise<object>;
}

/**
 * OrganizationControllerApi - object-oriented interface
 * @export
 * @class OrganizationControllerApi
 * @extends {BaseAPI}
 */
export class OrganizationControllerApi extends BaseAPI implements OrganizationControllerApiInterface {
    /**
     * Completely remove and discontinue the organization.
     * @summary Drop organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public dropOrganization(params: {}, options?: any) {
        return OrganizationControllerApiFp(this.configuration).dropOrganization(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Gets a basic information about organization.
     * @summary Get organization info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public getOrganization(params: {}, options?: any) {
        return OrganizationControllerApiFp(this.configuration).getOrganization(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     * Sets a basic information about organization.
     * @summary Update organization info
     * @param {Organization} organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationControllerApi
     */
    public updateOrganization(
        params: {
            organization: Organization;
        },
        options?: any,
    ) {
        return OrganizationControllerApiFp(this.configuration).updateOrganization(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * OrganizationModelControllerApi - axios parameter creator
 * @export
 */
export const OrganizationModelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiACLDocument} jsonApiACLDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityAcls(
            params: {
                workspaceId: string;
                jsonApiACLDocument: JsonApiACLDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiACLDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityAcls.",
                );
            }
            // verify required parameter 'jsonApiACLDocument' is not null or undefined
            if (jsonApiACLDocument === null || jsonApiACLDocument === undefined) {
                throw new RequiredError(
                    "jsonApiACLDocument",
                    "Required parameter jsonApiACLDocument was null or undefined when calling createChildEntityAcls.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/children/acls`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiACLDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiACLDocument !== undefined ? jsonApiACLDocument : {})
                : jsonApiACLDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityDataSources(
            params: {
                workspaceId: string;
                jsonApiDataSourceDocument: JsonApiDataSourceDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiDataSourceDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityDataSources.",
                );
            }
            // verify required parameter 'jsonApiDataSourceDocument' is not null or undefined
            if (jsonApiDataSourceDocument === null || jsonApiDataSourceDocument === undefined) {
                throw new RequiredError(
                    "jsonApiDataSourceDocument",
                    "Required parameter jsonApiDataSourceDocument was null or undefined when calling createChildEntityDataSources.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/children/data-sources`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiDataSourceDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiDataSourceDocument !== undefined ? jsonApiDataSourceDocument : {})
                : jsonApiDataSourceDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityModelModules(
            params: {
                workspaceId: string;
                jsonApiModelModuleDocument: JsonApiModelModuleDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiModelModuleDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityModelModules.",
                );
            }
            // verify required parameter 'jsonApiModelModuleDocument' is not null or undefined
            if (jsonApiModelModuleDocument === null || jsonApiModelModuleDocument === undefined) {
                throw new RequiredError(
                    "jsonApiModelModuleDocument",
                    "Required parameter jsonApiModelModuleDocument was null or undefined when calling createChildEntityModelModules.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/children/modelModules`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiModelModuleDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiModelModuleDocument !== undefined ? jsonApiModelModuleDocument : {})
                : jsonApiModelModuleDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityOrganizations(
            params: {
                workspaceId: string;
                jsonApiOrganizationDocument: JsonApiOrganizationDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiOrganizationDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityOrganizations.",
                );
            }
            // verify required parameter 'jsonApiOrganizationDocument' is not null or undefined
            if (jsonApiOrganizationDocument === null || jsonApiOrganizationDocument === undefined) {
                throw new RequiredError(
                    "jsonApiOrganizationDocument",
                    "Required parameter jsonApiOrganizationDocument was null or undefined when calling createChildEntityOrganizations.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/children/organizations`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiOrganizationDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiOrganizationDocument !== undefined ? jsonApiOrganizationDocument : {})
                : jsonApiOrganizationDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityUserGroups(
            params: {
                workspaceId: string;
                jsonApiUserGroupDocument: JsonApiUserGroupDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiUserGroupDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityUserGroups.",
                );
            }
            // verify required parameter 'jsonApiUserGroupDocument' is not null or undefined
            if (jsonApiUserGroupDocument === null || jsonApiUserGroupDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserGroupDocument",
                    "Required parameter jsonApiUserGroupDocument was null or undefined when calling createChildEntityUserGroups.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/children/userGroups`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserGroupDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserGroupDocument !== undefined ? jsonApiUserGroupDocument : {})
                : jsonApiUserGroupDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiUserDocument} jsonApiUserDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityUsers(
            params: {
                workspaceId: string;
                jsonApiUserDocument: JsonApiUserDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiUserDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityUsers.",
                );
            }
            // verify required parameter 'jsonApiUserDocument' is not null or undefined
            if (jsonApiUserDocument === null || jsonApiUserDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserDocument",
                    "Required parameter jsonApiUserDocument was null or undefined when calling createChildEntityUsers.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/children/users`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserDocument !== undefined ? jsonApiUserDocument : {})
                : jsonApiUserDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityWorkspaces(
            params: {
                workspaceId: string;
                jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiWorkspaceDocument } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createChildEntityWorkspaces.",
                );
            }
            // verify required parameter 'jsonApiWorkspaceDocument' is not null or undefined
            if (jsonApiWorkspaceDocument === null || jsonApiWorkspaceDocument === undefined) {
                throw new RequiredError(
                    "jsonApiWorkspaceDocument",
                    "Required parameter jsonApiWorkspaceDocument was null or undefined when calling createChildEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/children/workspaces`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiWorkspaceDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiWorkspaceDocument !== undefined ? jsonApiWorkspaceDocument : {})
                : jsonApiWorkspaceDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiACLDocument} jsonApiACLDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAcls(
            params: {
                jsonApiACLDocument: JsonApiACLDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiACLDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiACLDocument' is not null or undefined
            if (jsonApiACLDocument === null || jsonApiACLDocument === undefined) {
                throw new RequiredError(
                    "jsonApiACLDocument",
                    "Required parameter jsonApiACLDocument was null or undefined when calling createEntityAcls.",
                );
            }
            const localVarPath = `/api/acls`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiACLDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiACLDocument !== undefined ? jsonApiACLDocument : {})
                : jsonApiACLDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources(
            params: {
                jsonApiDataSourceDocument: JsonApiDataSourceDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiDataSourceDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiDataSourceDocument' is not null or undefined
            if (jsonApiDataSourceDocument === null || jsonApiDataSourceDocument === undefined) {
                throw new RequiredError(
                    "jsonApiDataSourceDocument",
                    "Required parameter jsonApiDataSourceDocument was null or undefined when calling createEntityDataSources.",
                );
            }
            const localVarPath = `/api/data-sources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiDataSourceDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiDataSourceDocument !== undefined ? jsonApiDataSourceDocument : {})
                : jsonApiDataSourceDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityModelModules(
            params: {
                jsonApiModelModuleDocument: JsonApiModelModuleDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiModelModuleDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiModelModuleDocument' is not null or undefined
            if (jsonApiModelModuleDocument === null || jsonApiModelModuleDocument === undefined) {
                throw new RequiredError(
                    "jsonApiModelModuleDocument",
                    "Required parameter jsonApiModelModuleDocument was null or undefined when calling createEntityModelModules.",
                );
            }
            const localVarPath = `/api/modelModules`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiModelModuleDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiModelModuleDocument !== undefined ? jsonApiModelModuleDocument : {})
                : jsonApiModelModuleDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityOrganizations(
            params: {
                jsonApiOrganizationDocument: JsonApiOrganizationDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiOrganizationDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiOrganizationDocument' is not null or undefined
            if (jsonApiOrganizationDocument === null || jsonApiOrganizationDocument === undefined) {
                throw new RequiredError(
                    "jsonApiOrganizationDocument",
                    "Required parameter jsonApiOrganizationDocument was null or undefined when calling createEntityOrganizations.",
                );
            }
            const localVarPath = `/api/organizations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiOrganizationDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiOrganizationDocument !== undefined ? jsonApiOrganizationDocument : {})
                : jsonApiOrganizationDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups(
            params: {
                jsonApiUserGroupDocument: JsonApiUserGroupDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiUserGroupDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiUserGroupDocument' is not null or undefined
            if (jsonApiUserGroupDocument === null || jsonApiUserGroupDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserGroupDocument",
                    "Required parameter jsonApiUserGroupDocument was null or undefined when calling createEntityUserGroups.",
                );
            }
            const localVarPath = `/api/userGroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserGroupDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserGroupDocument !== undefined ? jsonApiUserGroupDocument : {})
                : jsonApiUserGroupDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiUserDocument} jsonApiUserDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers(
            params: {
                jsonApiUserDocument: JsonApiUserDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiUserDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiUserDocument' is not null or undefined
            if (jsonApiUserDocument === null || jsonApiUserDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserDocument",
                    "Required parameter jsonApiUserDocument was null or undefined when calling createEntityUsers.",
                );
            }
            const localVarPath = `/api/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserDocument !== undefined ? jsonApiUserDocument : {})
                : jsonApiUserDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces(
            params: {
                jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { jsonApiWorkspaceDocument, variableParam, include } = params;
            // verify required parameter 'jsonApiWorkspaceDocument' is not null or undefined
            if (jsonApiWorkspaceDocument === null || jsonApiWorkspaceDocument === undefined) {
                throw new RequiredError(
                    "jsonApiWorkspaceDocument",
                    "Required parameter jsonApiWorkspaceDocument was null or undefined when calling createEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiWorkspaceDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiWorkspaceDocument !== undefined ? jsonApiWorkspaceDocument : {})
                : jsonApiWorkspaceDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAcls(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityAcls.",
                );
            }
            const localVarPath = `/api/acls/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityDataSources.",
                );
            }
            const localVarPath = `/api/data-sources/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityModelModules(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityModelModules.",
                );
            }
            const localVarPath = `/api/modelModules/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityOrganizations(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityOrganizations.",
                );
            }
            const localVarPath = `/api/organizations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityUserGroups.",
                );
            }
            const localVarPath = `/api/userGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityUsers.",
                );
            }
            const localVarPath = `/api/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/workspaces/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAcls(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/acls`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/data-sources`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesModelModules(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/modelModules`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesOrganizations(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/organizations`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/userGroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/users`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { variableParam, include, page, size, sort } = params;
            const localVarPath = `/api/workspaces`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAcls(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityAcls.",
                );
            }
            const localVarPath = `/api/acls/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityDataSources.",
                );
            }
            const localVarPath = `/api/data-sources/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityModelModules(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityModelModules.",
                );
            }
            const localVarPath = `/api/modelModules/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityOrganizations.",
                );
            }
            const localVarPath = `/api/organizations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityUserGroups.",
                );
            }
            const localVarPath = `/api/userGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityUsers.",
                );
            }
            const localVarPath = `/api/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/workspaces/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiACLDocument} jsonApiACLDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAcls(
            params: {
                id: string;
                jsonApiACLDocument: JsonApiACLDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiACLDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityAcls.",
                );
            }
            // verify required parameter 'jsonApiACLDocument' is not null or undefined
            if (jsonApiACLDocument === null || jsonApiACLDocument === undefined) {
                throw new RequiredError(
                    "jsonApiACLDocument",
                    "Required parameter jsonApiACLDocument was null or undefined when calling updateEntityAcls.",
                );
            }
            const localVarPath = `/api/acls/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiACLDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiACLDocument !== undefined ? jsonApiACLDocument : {})
                : jsonApiACLDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources(
            params: {
                id: string;
                jsonApiDataSourceDocument: JsonApiDataSourceDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiDataSourceDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityDataSources.",
                );
            }
            // verify required parameter 'jsonApiDataSourceDocument' is not null or undefined
            if (jsonApiDataSourceDocument === null || jsonApiDataSourceDocument === undefined) {
                throw new RequiredError(
                    "jsonApiDataSourceDocument",
                    "Required parameter jsonApiDataSourceDocument was null or undefined when calling updateEntityDataSources.",
                );
            }
            const localVarPath = `/api/data-sources/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiDataSourceDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiDataSourceDocument !== undefined ? jsonApiDataSourceDocument : {})
                : jsonApiDataSourceDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityModelModules(
            params: {
                id: string;
                jsonApiModelModuleDocument: JsonApiModelModuleDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiModelModuleDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityModelModules.",
                );
            }
            // verify required parameter 'jsonApiModelModuleDocument' is not null or undefined
            if (jsonApiModelModuleDocument === null || jsonApiModelModuleDocument === undefined) {
                throw new RequiredError(
                    "jsonApiModelModuleDocument",
                    "Required parameter jsonApiModelModuleDocument was null or undefined when calling updateEntityModelModules.",
                );
            }
            const localVarPath = `/api/modelModules/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiModelModuleDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiModelModuleDocument !== undefined ? jsonApiModelModuleDocument : {})
                : jsonApiModelModuleDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations(
            params: {
                id: string;
                jsonApiOrganizationDocument: JsonApiOrganizationDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiOrganizationDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityOrganizations.",
                );
            }
            // verify required parameter 'jsonApiOrganizationDocument' is not null or undefined
            if (jsonApiOrganizationDocument === null || jsonApiOrganizationDocument === undefined) {
                throw new RequiredError(
                    "jsonApiOrganizationDocument",
                    "Required parameter jsonApiOrganizationDocument was null or undefined when calling updateEntityOrganizations.",
                );
            }
            const localVarPath = `/api/organizations/{id}`.replace(
                `{${"id"}}`,
                encodeURIComponent(String(id)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiOrganizationDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiOrganizationDocument !== undefined ? jsonApiOrganizationDocument : {})
                : jsonApiOrganizationDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups(
            params: {
                id: string;
                jsonApiUserGroupDocument: JsonApiUserGroupDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiUserGroupDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityUserGroups.",
                );
            }
            // verify required parameter 'jsonApiUserGroupDocument' is not null or undefined
            if (jsonApiUserGroupDocument === null || jsonApiUserGroupDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserGroupDocument",
                    "Required parameter jsonApiUserGroupDocument was null or undefined when calling updateEntityUserGroups.",
                );
            }
            const localVarPath = `/api/userGroups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserGroupDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserGroupDocument !== undefined ? jsonApiUserGroupDocument : {})
                : jsonApiUserGroupDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserDocument} jsonApiUserDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers(
            params: {
                id: string;
                jsonApiUserDocument: JsonApiUserDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiUserDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityUsers.",
                );
            }
            // verify required parameter 'jsonApiUserDocument' is not null or undefined
            if (jsonApiUserDocument === null || jsonApiUserDocument === undefined) {
                throw new RequiredError(
                    "jsonApiUserDocument",
                    "Required parameter jsonApiUserDocument was null or undefined when calling updateEntityUsers.",
                );
            }
            const localVarPath = `/api/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiUserDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiUserDocument !== undefined ? jsonApiUserDocument : {})
                : jsonApiUserDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces(
            params: {
                id: string;
                jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, jsonApiWorkspaceDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityWorkspaces.",
                );
            }
            // verify required parameter 'jsonApiWorkspaceDocument' is not null or undefined
            if (jsonApiWorkspaceDocument === null || jsonApiWorkspaceDocument === undefined) {
                throw new RequiredError(
                    "jsonApiWorkspaceDocument",
                    "Required parameter jsonApiWorkspaceDocument was null or undefined when calling updateEntityWorkspaces.",
                );
            }
            const localVarPath = `/api/workspaces/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiWorkspaceDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiWorkspaceDocument !== undefined ? jsonApiWorkspaceDocument : {})
                : jsonApiWorkspaceDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * OrganizationModelControllerApi - functional programming interface
 * @export
 */
export const OrganizationModelControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiACLDocument} jsonApiACLDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityAcls(
            params: {
                workspaceId: string;
                jsonApiACLDocument: JsonApiACLDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityDataSources(
            params: {
                workspaceId: string;
                jsonApiDataSourceDocument: JsonApiDataSourceDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityModelModules(
            params: {
                workspaceId: string;
                jsonApiModelModuleDocument: JsonApiModelModuleDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiModelModuleDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityModelModules(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityOrganizations(
            params: {
                workspaceId: string;
                jsonApiOrganizationDocument: JsonApiOrganizationDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityUserGroups(
            params: {
                workspaceId: string;
                jsonApiUserGroupDocument: JsonApiUserGroupDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiUserDocument} jsonApiUserDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityUsers(
            params: {
                workspaceId: string;
                jsonApiUserDocument: JsonApiUserDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityWorkspaces(
            params: {
                workspaceId: string;
                jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createChildEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiACLDocument} jsonApiACLDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAcls(
            params: {
                jsonApiACLDocument: JsonApiACLDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources(
            params: {
                jsonApiDataSourceDocument: JsonApiDataSourceDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityModelModules(
            params: {
                jsonApiModelModuleDocument: JsonApiModelModuleDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiModelModuleDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityModelModules(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityOrganizations(
            params: {
                jsonApiOrganizationDocument: JsonApiOrganizationDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups(
            params: {
                jsonApiUserGroupDocument: JsonApiUserGroupDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiUserDocument} jsonApiUserDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers(
            params: {
                jsonApiUserDocument: JsonApiUserDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces(
            params: {
                jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAcls(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityModelModules(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityModelModules(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityOrganizations(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAcls(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesModelModules(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiModelModuleList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesModelModules(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesOrganizations(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceList> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAcls(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityModelModules(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiModelModuleDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityModelModules(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiACLDocument} jsonApiACLDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAcls(
            params: {
                id: string;
                jsonApiACLDocument: JsonApiACLDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiACLDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityAcls(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources(
            params: {
                id: string;
                jsonApiDataSourceDocument: JsonApiDataSourceDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDataSourceDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityDataSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityModelModules(
            params: {
                id: string;
                jsonApiModelModuleDocument: JsonApiModelModuleDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiModelModuleDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityModelModules(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations(
            params: {
                id: string;
                jsonApiOrganizationDocument: JsonApiOrganizationDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiOrganizationDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityOrganizations(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups(
            params: {
                id: string;
                jsonApiUserGroupDocument: JsonApiUserGroupDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserGroupDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityUserGroups(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserDocument} jsonApiUserDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers(
            params: {
                id: string;
                jsonApiUserDocument: JsonApiUserDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiUserDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityUsers(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces(
            params: {
                id: string;
                jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiWorkspaceDocument> {
            const localVarAxiosArgs = OrganizationModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityWorkspaces(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * OrganizationModelControllerApi - factory interface
 * @export
 */
export const OrganizationModelControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiACLDocument} jsonApiACLDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityAcls(
            params: {
                workspaceId: string;
                jsonApiACLDocument: JsonApiACLDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityDataSources(
            params: {
                workspaceId: string;
                jsonApiDataSourceDocument: JsonApiDataSourceDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityDataSources(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityModelModules(
            params: {
                workspaceId: string;
                jsonApiModelModuleDocument: JsonApiModelModuleDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiModelModuleDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityModelModules(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityOrganizations(
            params: {
                workspaceId: string;
                jsonApiOrganizationDocument: JsonApiOrganizationDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiOrganizationDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityOrganizations(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityUserGroups(
            params: {
                workspaceId: string;
                jsonApiUserGroupDocument: JsonApiUserGroupDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityUserGroups(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiUserDocument} jsonApiUserDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityUsers(
            params: {
                workspaceId: string;
                jsonApiUserDocument: JsonApiUserDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createChildEntityWorkspaces(
            params: {
                workspaceId: string;
                jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDocument> {
            return OrganizationModelControllerApiFp(configuration).createChildEntityWorkspaces(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {JsonApiACLDocument} jsonApiACLDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAcls(
            params: {
                jsonApiACLDocument: JsonApiACLDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityDataSources(
            params: {
                jsonApiDataSourceDocument: JsonApiDataSourceDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityModelModules(
            params: {
                jsonApiModelModuleDocument: JsonApiModelModuleDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiModelModuleDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityModelModules(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityOrganizations(
            params: {
                jsonApiOrganizationDocument: JsonApiOrganizationDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiOrganizationDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityOrganizations(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUserGroups(
            params: {
                jsonApiUserGroupDocument: JsonApiUserGroupDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiUserDocument} jsonApiUserDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityUsers(
            params: {
                jsonApiUserDocument: JsonApiUserDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityWorkspaces(
            params: {
                jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDocument> {
            return OrganizationModelControllerApiFp(configuration).createEntityWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAcls(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityDataSources(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityModelModules(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityModelModules(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityOrganizations(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityOrganizations(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUserGroups(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityUsers(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityWorkspaces(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return OrganizationModelControllerApiFp(configuration).deleteEntityWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesAcls(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesDataSources(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesModelModules(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiModelModuleList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesModelModules(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesOrganizations(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiOrganizationList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesOrganizations(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUserGroups(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesUsers(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesWorkspaces(
            params: {
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceList> {
            return OrganizationModelControllerApiFp(configuration).getAllEntitiesWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAcls(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDataSources(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityModelModules(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiModelModuleDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityModelModules(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityOrganizations(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiOrganizationDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityOrganizations(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUserGroups(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityUsers(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityWorkspaces(
            params: {
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDocument> {
            return OrganizationModelControllerApiFp(configuration).getEntityWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiACLDocument} jsonApiACLDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAcls(
            params: {
                id: string;
                jsonApiACLDocument: JsonApiACLDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiACLDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityAcls(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityDataSources(
            params: {
                id: string;
                jsonApiDataSourceDocument: JsonApiDataSourceDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiDataSourceDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityDataSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityModelModules(
            params: {
                id: string;
                jsonApiModelModuleDocument: JsonApiModelModuleDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiModelModuleDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityModelModules(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityOrganizations(
            params: {
                id: string;
                jsonApiOrganizationDocument: JsonApiOrganizationDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiOrganizationDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityOrganizations(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUserGroups(
            params: {
                id: string;
                jsonApiUserGroupDocument: JsonApiUserGroupDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserGroupDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityUserGroups(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiUserDocument} jsonApiUserDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityUsers(
            params: {
                id: string;
                jsonApiUserDocument: JsonApiUserDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiUserDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityUsers(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityWorkspaces(
            params: {
                id: string;
                jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiWorkspaceDocument> {
            return OrganizationModelControllerApiFp(configuration).updateEntityWorkspaces(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * OrganizationModelControllerApi - interface
 * @export
 * @interface OrganizationModelControllerApi
 */
export interface OrganizationModelControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiACLDocument} jsonApiACLDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityAcls(
        params: {
            workspaceId: string;
            jsonApiACLDocument: JsonApiACLDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityDataSources(
        params: {
            workspaceId: string;
            jsonApiDataSourceDocument: JsonApiDataSourceDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityModelModules(
        params: {
            workspaceId: string;
            jsonApiModelModuleDocument: JsonApiModelModuleDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiModelModuleDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityOrganizations(
        params: {
            workspaceId: string;
            jsonApiOrganizationDocument: JsonApiOrganizationDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiOrganizationDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityUserGroups(
        params: {
            workspaceId: string;
            jsonApiUserGroupDocument: JsonApiUserGroupDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiUserDocument} jsonApiUserDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityUsers(
        params: {
            workspaceId: string;
            jsonApiUserDocument: JsonApiUserDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createChildEntityWorkspaces(
        params: {
            workspaceId: string;
            jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDocument>;

    /**
     *
     * @param {JsonApiACLDocument} jsonApiACLDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityAcls(
        params: {
            jsonApiACLDocument: JsonApiACLDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLDocument>;

    /**
     *
     * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityDataSources(
        params: {
            jsonApiDataSourceDocument: JsonApiDataSourceDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceDocument>;

    /**
     *
     * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityModelModules(
        params: {
            jsonApiModelModuleDocument: JsonApiModelModuleDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiModelModuleDocument>;

    /**
     *
     * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityOrganizations(
        params: {
            jsonApiOrganizationDocument: JsonApiOrganizationDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiOrganizationDocument>;

    /**
     *
     * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityUserGroups(
        params: {
            jsonApiUserGroupDocument: JsonApiUserGroupDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupDocument>;

    /**
     *
     * @param {JsonApiUserDocument} jsonApiUserDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityUsers(
        params: {
            jsonApiUserDocument: JsonApiUserDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserDocument>;

    /**
     *
     * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    createEntityWorkspaces(
        params: {
            jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityAcls(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityDataSources(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityModelModules(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityOrganizations(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityUserGroups(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityUsers(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    deleteEntityWorkspaces(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesAcls(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLList>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesDataSources(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceList>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesModelModules(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiModelModuleList>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesOrganizations(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiOrganizationList>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesUserGroups(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupList>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesUsers(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserList>;

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getAllEntitiesWorkspaces(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceList>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityAcls(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityDataSources(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityModelModules(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiModelModuleDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityOrganizations(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiOrganizationDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityUserGroups(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityUsers(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserDocument>;

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    getEntityWorkspaces(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiACLDocument} jsonApiACLDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityAcls(
        params: {
            id: string;
            jsonApiACLDocument: JsonApiACLDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiACLDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityDataSources(
        params: {
            id: string;
            jsonApiDataSourceDocument: JsonApiDataSourceDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiDataSourceDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityModelModules(
        params: {
            id: string;
            jsonApiModelModuleDocument: JsonApiModelModuleDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiModelModuleDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityOrganizations(
        params: {
            id: string;
            jsonApiOrganizationDocument: JsonApiOrganizationDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiOrganizationDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityUserGroups(
        params: {
            id: string;
            jsonApiUserGroupDocument: JsonApiUserGroupDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserGroupDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiUserDocument} jsonApiUserDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityUsers(
        params: {
            id: string;
            jsonApiUserDocument: JsonApiUserDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiUserDocument>;

    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApiInterface
     */
    updateEntityWorkspaces(
        params: {
            id: string;
            jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiWorkspaceDocument>;
}

/**
 * OrganizationModelControllerApi - object-oriented interface
 * @export
 * @class OrganizationModelControllerApi
 * @extends {BaseAPI}
 */
export class OrganizationModelControllerApi extends BaseAPI
    implements OrganizationModelControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiACLDocument} jsonApiACLDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityAcls(
        params: {
            workspaceId: string;
            jsonApiACLDocument: JsonApiACLDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityDataSources(
        params: {
            workspaceId: string;
            jsonApiDataSourceDocument: JsonApiDataSourceDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityDataSources(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityModelModules(
        params: {
            workspaceId: string;
            jsonApiModelModuleDocument: JsonApiModelModuleDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityModelModules(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityOrganizations(
        params: {
            workspaceId: string;
            jsonApiOrganizationDocument: JsonApiOrganizationDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityOrganizations(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityUserGroups(
        params: {
            workspaceId: string;
            jsonApiUserGroupDocument: JsonApiUserGroupDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityUserGroups(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiUserDocument} jsonApiUserDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityUsers(
        params: {
            workspaceId: string;
            jsonApiUserDocument: JsonApiUserDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createChildEntityWorkspaces(
        params: {
            workspaceId: string;
            jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createChildEntityWorkspaces(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {JsonApiACLDocument} jsonApiACLDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityAcls(
        params: {
            jsonApiACLDocument: JsonApiACLDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityDataSources(
        params: {
            jsonApiDataSourceDocument: JsonApiDataSourceDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityDataSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityModelModules(
        params: {
            jsonApiModelModuleDocument: JsonApiModelModuleDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityModelModules(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityOrganizations(
        params: {
            jsonApiOrganizationDocument: JsonApiOrganizationDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityOrganizations(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityUserGroups(
        params: {
            jsonApiUserGroupDocument: JsonApiUserGroupDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiUserDocument} jsonApiUserDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityUsers(
        params: {
            jsonApiUserDocument: JsonApiUserDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public createEntityWorkspaces(
        params: {
            jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).createEntityWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityAcls(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityDataSources(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityDataSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityModelModules(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityModelModules(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityOrganizations(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityOrganizations(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityUserGroups(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityUsers(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public deleteEntityWorkspaces(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).deleteEntityWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesAcls(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesDataSources(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesDataSources(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesModelModules(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesModelModules(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesOrganizations(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesOrganizations(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesUserGroups(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesUsers(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getAllEntitiesWorkspaces(
        params: {
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getAllEntitiesWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityAcls(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityDataSources(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityDataSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityModelModules(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityModelModules(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityOrganizations(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityOrganizations(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityUserGroups(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityUsers(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public getEntityWorkspaces(
        params: {
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).getEntityWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiACLDocument} jsonApiACLDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityAcls(
        params: {
            id: string;
            jsonApiACLDocument: JsonApiACLDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityAcls(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiDataSourceDocument} jsonApiDataSourceDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityDataSources(
        params: {
            id: string;
            jsonApiDataSourceDocument: JsonApiDataSourceDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityDataSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiModelModuleDocument} jsonApiModelModuleDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityModelModules(
        params: {
            id: string;
            jsonApiModelModuleDocument: JsonApiModelModuleDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityModelModules(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiOrganizationDocument} jsonApiOrganizationDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityOrganizations(
        params: {
            id: string;
            jsonApiOrganizationDocument: JsonApiOrganizationDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityOrganizations(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiUserGroupDocument} jsonApiUserGroupDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityUserGroups(
        params: {
            id: string;
            jsonApiUserGroupDocument: JsonApiUserGroupDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityUserGroups(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiUserDocument} jsonApiUserDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityUsers(
        params: {
            id: string;
            jsonApiUserDocument: JsonApiUserDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityUsers(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {JsonApiWorkspaceDocument} jsonApiWorkspaceDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationModelControllerApi
     */
    public updateEntityWorkspaces(
        params: {
            id: string;
            jsonApiWorkspaceDocument: JsonApiWorkspaceDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return OrganizationModelControllerApiFp(this.configuration).updateEntityWorkspaces(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * ProfileControllerApi - axios parameter creator
 * @export
 */
export const ProfileControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index(params: {}, options: any = {}): RequestArgs {
            const {} = params;
            const localVarPath = `/metadata-profile`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * ProfileControllerApi - functional programming interface
 * @export
 */
export const ProfileControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index(
            params: {},
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Profile> {
            const localVarAxiosArgs = ProfileControllerApiAxiosParamCreator(configuration).index(
                params,
                options,
            );
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * ProfileControllerApi - factory interface
 * @export
 */
export const ProfileControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        index(params: {}, options?: any): AxiosPromise<Profile> {
            return ProfileControllerApiFp(configuration).index(params, options)(axios, basePath);
        },
    };
};

/**
 * ProfileControllerApi - interface
 * @export
 * @interface ProfileControllerApi
 */
export interface ProfileControllerApiInterface {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApiInterface
     */
    index(params: {}, options?: any): AxiosPromise<Profile>;
}

/**
 * ProfileControllerApi - object-oriented interface
 * @export
 * @class ProfileControllerApi
 * @extends {BaseAPI}
 */
export class ProfileControllerApi extends BaseAPI implements ProfileControllerApiInterface {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProfileControllerApi
     */
    public index(params: {}, options?: any) {
        return ProfileControllerApiFp(this.configuration).index(params, options)(this.axios, this.basePath);
    }
}

/**
 * UserModelControllerApi - axios parameter creator
 * @export
 */
export const UserModelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens(
            params: {
                userId: string;
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { userId, id, variableParam } = params;
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    "userId",
                    "Required parameter userId was null or undefined when calling deleteEntityApiTokens.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityApiTokens.",
                );
            }
            const localVarPath = `/api/users/{userId}/apiTokens/{id}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens(
            params: {
                userId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { userId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    "userId",
                    "Required parameter userId was null or undefined when calling getAllEntitiesApiTokens.",
                );
            }
            const localVarPath = `/api/users/{userId}/apiTokens`.replace(
                `{${"userId"}}`,
                encodeURIComponent(String(userId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens(
            params: {
                userId: string;
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { userId, id, variableParam, include, page, size, sort } = params;
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError(
                    "userId",
                    "Required parameter userId was null or undefined when calling getEntityApiTokens.",
                );
            }
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityApiTokens.",
                );
            }
            const localVarPath = `/api/users/{userId}/apiTokens/{id}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * UserModelControllerApi - functional programming interface
 * @export
 */
export const UserModelControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens(
            params: {
                userId: string;
                id: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = UserModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityApiTokens(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} userId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens(
            params: {
                userId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenList> {
            const localVarAxiosArgs = UserModelControllerApiAxiosParamCreator(
                configuration,
            ).getAllEntitiesApiTokens(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens(
            params: {
                userId: string;
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiApiTokenDocument> {
            const localVarAxiosArgs = UserModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityApiTokens(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * UserModelControllerApi - factory interface
 * @export
 */
export const UserModelControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityApiTokens(
            params: {
                userId: string;
                id: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return UserModelControllerApiFp(configuration).deleteEntityApiTokens(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} userId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllEntitiesApiTokens(
            params: {
                userId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiApiTokenList> {
            return UserModelControllerApiFp(configuration).getAllEntitiesApiTokens(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} userId
         * @param {string} id
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityApiTokens(
            params: {
                userId: string;
                id: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiApiTokenDocument> {
            return UserModelControllerApiFp(configuration).getEntityApiTokens(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * UserModelControllerApi - interface
 * @export
 * @interface UserModelControllerApi
 */
export interface UserModelControllerApiInterface {
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    deleteEntityApiTokens(
        params: {
            userId: string;
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    getAllEntitiesApiTokens(
        params: {
            userId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiApiTokenList>;

    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApiInterface
     */
    getEntityApiTokens(
        params: {
            userId: string;
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiApiTokenDocument>;
}

/**
 * UserModelControllerApi - object-oriented interface
 * @export
 * @class UserModelControllerApi
 * @extends {BaseAPI}
 */
export class UserModelControllerApi extends BaseAPI implements UserModelControllerApiInterface {
    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    public deleteEntityApiTokens(
        params: {
            userId: string;
            id: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return UserModelControllerApiFp(this.configuration).deleteEntityApiTokens(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} userId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    public getAllEntitiesApiTokens(
        params: {
            userId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return UserModelControllerApiFp(this.configuration).getAllEntitiesApiTokens(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} userId
     * @param {string} id
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserModelControllerApi
     */
    public getEntityApiTokens(
        params: {
            userId: string;
            id: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return UserModelControllerApiFp(this.configuration).getEntityApiTokens(params, options)(
            this.axios,
            this.basePath,
        );
    }
}

/**
 * WorkspaceModelControllerApi - axios parameter creator
 * @export
 */
export const WorkspaceModelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiAnalyticalDashboardDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'jsonApiAnalyticalDashboardDocument' is not null or undefined
            if (
                jsonApiAnalyticalDashboardDocument === null ||
                jsonApiAnalyticalDashboardDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiAnalyticalDashboardDocument",
                    "Required parameter jsonApiAnalyticalDashboardDocument was null or undefined when calling createEntityAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/analyticalDashboards`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiAnalyticalDashboardDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiAnalyticalDashboardDocument !== undefined
                          ? jsonApiAnalyticalDashboardDocument
                          : {},
                  )
                : jsonApiAnalyticalDashboardDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts(
            params: {
                workspaceId: string;
                jsonApiFilterContextDocument: JsonApiFilterContextDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiFilterContextDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityFilterContexts.",
                );
            }
            // verify required parameter 'jsonApiFilterContextDocument' is not null or undefined
            if (jsonApiFilterContextDocument === null || jsonApiFilterContextDocument === undefined) {
                throw new RequiredError(
                    "jsonApiFilterContextDocument",
                    "Required parameter jsonApiFilterContextDocument was null or undefined when calling createEntityFilterContexts.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/filterContexts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiFilterContextDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiFilterContextDocument !== undefined ? jsonApiFilterContextDocument : {},
                  )
                : jsonApiFilterContextDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricDocument} jsonApiMetricDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics(
            params: {
                workspaceId: string;
                jsonApiMetricDocument: JsonApiMetricDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiMetricDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityMetrics.",
                );
            }
            // verify required parameter 'jsonApiMetricDocument' is not null or undefined
            if (jsonApiMetricDocument === null || jsonApiMetricDocument === undefined) {
                throw new RequiredError(
                    "jsonApiMetricDocument",
                    "Required parameter jsonApiMetricDocument was null or undefined when calling createEntityMetrics.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/metrics`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiMetricDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiMetricDocument !== undefined ? jsonApiMetricDocument : {})
                : jsonApiMetricDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects(
            params: {
                workspaceId: string;
                jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiVisualizationObjectDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'jsonApiVisualizationObjectDocument' is not null or undefined
            if (
                jsonApiVisualizationObjectDocument === null ||
                jsonApiVisualizationObjectDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiVisualizationObjectDocument",
                    "Required parameter jsonApiVisualizationObjectDocument was null or undefined when calling createEntityVisualizationObjects.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/visualizationObjects`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiVisualizationObjectDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiVisualizationObjectDocument !== undefined
                          ? jsonApiVisualizationObjectDocument
                          : {},
                  )
                : jsonApiVisualizationObjectDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/analyticalDashboards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityFilterContexts.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityFilterContexts.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/filterContexts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityMetrics.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityMetrics.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/metrics/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling deleteEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityVisualizationObjects.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/visualizationObjects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAnalyticalDashboards(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/analyticalDashboards`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAttributes(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesAttributes.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/attributes`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesDatasets(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesDatasets.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/datasets`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFacts(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesFacts.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/facts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFilterContexts(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesFilterContexts.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/filterContexts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesLabels(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesLabels.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/labels`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesMetrics(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesMetrics.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/metrics`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesSources(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesSources.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/sources`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesTables(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesTables.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/tables`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesVisualizationObjects(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesVisualizationObjects.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/visualizationObjects`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/analyticalDashboards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityAttributes.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityAttributes.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/attributes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityDatasets.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityDatasets.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/datasets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityFacts.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityFacts.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/facts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityFilterContexts.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityFilterContexts.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/filterContexts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityLabels.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityLabels.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/labels/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityMetrics.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityMetrics.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/metrics/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitySources(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntitySources.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitySources.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/sources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityTables(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityTables.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityTables.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/tables/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling getEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityVisualizationObjects.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/visualizationObjects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards(
            params: {
                id: string;
                workspaceId: string;
                jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, jsonApiAnalyticalDashboardDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityAnalyticalDashboards.",
                );
            }
            // verify required parameter 'jsonApiAnalyticalDashboardDocument' is not null or undefined
            if (
                jsonApiAnalyticalDashboardDocument === null ||
                jsonApiAnalyticalDashboardDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiAnalyticalDashboardDocument",
                    "Required parameter jsonApiAnalyticalDashboardDocument was null or undefined when calling updateEntityAnalyticalDashboards.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/analyticalDashboards/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiAnalyticalDashboardDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiAnalyticalDashboardDocument !== undefined
                          ? jsonApiAnalyticalDashboardDocument
                          : {},
                  )
                : jsonApiAnalyticalDashboardDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts(
            params: {
                id: string;
                workspaceId: string;
                jsonApiFilterContextDocument: JsonApiFilterContextDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, jsonApiFilterContextDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityFilterContexts.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityFilterContexts.",
                );
            }
            // verify required parameter 'jsonApiFilterContextDocument' is not null or undefined
            if (jsonApiFilterContextDocument === null || jsonApiFilterContextDocument === undefined) {
                throw new RequiredError(
                    "jsonApiFilterContextDocument",
                    "Required parameter jsonApiFilterContextDocument was null or undefined when calling updateEntityFilterContexts.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/filterContexts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiFilterContextDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiFilterContextDocument !== undefined ? jsonApiFilterContextDocument : {},
                  )
                : jsonApiFilterContextDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {JsonApiMetricDocument} jsonApiMetricDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics(
            params: {
                id: string;
                workspaceId: string;
                jsonApiMetricDocument: JsonApiMetricDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, jsonApiMetricDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityMetrics.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityMetrics.",
                );
            }
            // verify required parameter 'jsonApiMetricDocument' is not null or undefined
            if (jsonApiMetricDocument === null || jsonApiMetricDocument === undefined) {
                throw new RequiredError(
                    "jsonApiMetricDocument",
                    "Required parameter jsonApiMetricDocument was null or undefined when calling updateEntityMetrics.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/metrics/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiMetricDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiMetricDocument !== undefined ? jsonApiMetricDocument : {})
                : jsonApiMetricDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects(
            params: {
                id: string;
                workspaceId: string;
                jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { id, workspaceId, jsonApiVisualizationObjectDocument, variableParam, include } = params;
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError(
                    "id",
                    "Required parameter id was null or undefined when calling updateEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityVisualizationObjects.",
                );
            }
            // verify required parameter 'jsonApiVisualizationObjectDocument' is not null or undefined
            if (
                jsonApiVisualizationObjectDocument === null ||
                jsonApiVisualizationObjectDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiVisualizationObjectDocument",
                    "Required parameter jsonApiVisualizationObjectDocument was null or undefined when calling updateEntityVisualizationObjects.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model/visualizationObjects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiVisualizationObjectDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiVisualizationObjectDocument !== undefined
                          ? jsonApiVisualizationObjectDocument
                          : {},
                  )
                : jsonApiVisualizationObjectDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * WorkspaceModelControllerApi - functional programming interface
 * @export
 */
export const WorkspaceModelControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts(
            params: {
                workspaceId: string;
                jsonApiFilterContextDocument: JsonApiFilterContextDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricDocument} jsonApiMetricDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics(
            params: {
                workspaceId: string;
                jsonApiMetricDocument: JsonApiMetricDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects(
            params: {
                workspaceId: string;
                jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).createEntityVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAnalyticalDashboards(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardList> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAttributes(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeList> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesAttributes(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesDatasets(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetList> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesDatasets(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFacts(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactList> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesFacts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFilterContexts(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextList> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesLabels(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelList> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesLabels(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesMetrics(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricList> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesSources(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiSourceTablesList> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesSources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesTables(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiSourceTableList> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesTables(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesVisualizationObjects(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectList> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityAttributes(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityDatasets(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityFacts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityLabels(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitySources(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiSourceTablesDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntitySources(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityTables(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiSourceTableDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityTables(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).getEntityVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards(
            params: {
                id: string;
                workspaceId: string;
                jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityAnalyticalDashboards(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts(
            params: {
                id: string;
                workspaceId: string;
                jsonApiFilterContextDocument: JsonApiFilterContextDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityFilterContexts(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {JsonApiMetricDocument} jsonApiMetricDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics(
            params: {
                id: string;
                workspaceId: string;
                jsonApiMetricDocument: JsonApiMetricDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityMetrics(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects(
            params: {
                id: string;
                workspaceId: string;
                jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectDocument> {
            const localVarAxiosArgs = WorkspaceModelControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityVisualizationObjects(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * WorkspaceModelControllerApi - factory interface
 * @export
 */
export const WorkspaceModelControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards(
            params: {
                workspaceId: string;
                jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardDocument> {
            return WorkspaceModelControllerApiFp(configuration).createEntityAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts(
            params: {
                workspaceId: string;
                jsonApiFilterContextDocument: JsonApiFilterContextDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextDocument> {
            return WorkspaceModelControllerApiFp(configuration).createEntityFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricDocument} jsonApiMetricDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics(
            params: {
                workspaceId: string;
                jsonApiMetricDocument: JsonApiMetricDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricDocument> {
            return WorkspaceModelControllerApiFp(configuration).createEntityMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects(
            params: {
                workspaceId: string;
                jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectDocument> {
            return WorkspaceModelControllerApiFp(configuration).createEntityVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceModelControllerApiFp(configuration).deleteEntityAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceModelControllerApiFp(configuration).deleteEntityFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceModelControllerApiFp(configuration).deleteEntityMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceModelControllerApiFp(configuration).deleteEntityVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAnalyticalDashboards(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardList> {
            return WorkspaceModelControllerApiFp(configuration).getEntitiesAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAttributes(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiAttributeList> {
            return WorkspaceModelControllerApiFp(configuration).getEntitiesAttributes(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesDatasets(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiDatasetList> {
            return WorkspaceModelControllerApiFp(configuration).getEntitiesDatasets(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFacts(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiFactList> {
            return WorkspaceModelControllerApiFp(configuration).getEntitiesFacts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFilterContexts(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextList> {
            return WorkspaceModelControllerApiFp(configuration).getEntitiesFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesLabels(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiLabelList> {
            return WorkspaceModelControllerApiFp(configuration).getEntitiesLabels(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesMetrics(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricList> {
            return WorkspaceModelControllerApiFp(configuration).getEntitiesMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesSources(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiSourceTablesList> {
            return WorkspaceModelControllerApiFp(configuration).getEntitiesSources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesTables(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiSourceTableList> {
            return WorkspaceModelControllerApiFp(configuration).getEntitiesTables(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesVisualizationObjects(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectList> {
            return WorkspaceModelControllerApiFp(configuration).getEntitiesVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardDocument> {
            return WorkspaceModelControllerApiFp(configuration).getEntityAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiAttributeDocument> {
            return WorkspaceModelControllerApiFp(configuration).getEntityAttributes(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiDatasetDocument> {
            return WorkspaceModelControllerApiFp(configuration).getEntityDatasets(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiFactDocument> {
            return WorkspaceModelControllerApiFp(configuration).getEntityFacts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextDocument> {
            return WorkspaceModelControllerApiFp(configuration).getEntityFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiLabelDocument> {
            return WorkspaceModelControllerApiFp(configuration).getEntityLabels(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricDocument> {
            return WorkspaceModelControllerApiFp(configuration).getEntityMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitySources(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiSourceTablesDocument> {
            return WorkspaceModelControllerApiFp(configuration).getEntitySources(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityTables(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiSourceTableDocument> {
            return WorkspaceModelControllerApiFp(configuration).getEntityTables(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects(
            params: {
                id: string;
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectDocument> {
            return WorkspaceModelControllerApiFp(configuration).getEntityVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards(
            params: {
                id: string;
                workspaceId: string;
                jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardDocument> {
            return WorkspaceModelControllerApiFp(configuration).updateEntityAnalyticalDashboards(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts(
            params: {
                id: string;
                workspaceId: string;
                jsonApiFilterContextDocument: JsonApiFilterContextDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextDocument> {
            return WorkspaceModelControllerApiFp(configuration).updateEntityFilterContexts(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {JsonApiMetricDocument} jsonApiMetricDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics(
            params: {
                id: string;
                workspaceId: string;
                jsonApiMetricDocument: JsonApiMetricDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricDocument> {
            return WorkspaceModelControllerApiFp(configuration).updateEntityMetrics(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} id
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects(
            params: {
                id: string;
                workspaceId: string;
                jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectDocument> {
            return WorkspaceModelControllerApiFp(configuration).updateEntityVisualizationObjects(
                params,
                options,
            )(axios, basePath);
        },
    };
};

/**
 * WorkspaceModelControllerApi - interface
 * @export
 * @interface WorkspaceModelControllerApi
 */
export interface WorkspaceModelControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    createEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    createEntityFilterContexts(
        params: {
            workspaceId: string;
            jsonApiFilterContextDocument: JsonApiFilterContextDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricDocument} jsonApiMetricDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    createEntityMetrics(
        params: {
            workspaceId: string;
            jsonApiMetricDocument: JsonApiMetricDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    createEntityVisualizationObjects(
        params: {
            workspaceId: string;
            jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    deleteEntityAnalyticalDashboards(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    deleteEntityFilterContexts(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    deleteEntityMetrics(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    deleteEntityVisualizationObjects(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntitiesAnalyticalDashboards(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntitiesAttributes(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiAttributeList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntitiesDatasets(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiDatasetList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntitiesFacts(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiFactList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntitiesFilterContexts(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntitiesLabels(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiLabelList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntitiesMetrics(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntitiesSources(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiSourceTablesList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntitiesTables(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiSourceTableList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntitiesVisualizationObjects(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectList>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntityAnalyticalDashboards(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntityAttributes(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiAttributeDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntityDatasets(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiDatasetDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntityFacts(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiFactDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntityFilterContexts(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntityLabels(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiLabelDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntityMetrics(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntitySources(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiSourceTablesDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntityTables(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiSourceTableDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    getEntityVisualizationObjects(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    updateEntityAnalyticalDashboards(
        params: {
            id: string;
            workspaceId: string;
            jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    updateEntityFilterContexts(
        params: {
            id: string;
            workspaceId: string;
            jsonApiFilterContextDocument: JsonApiFilterContextDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {JsonApiMetricDocument} jsonApiMetricDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    updateEntityMetrics(
        params: {
            id: string;
            workspaceId: string;
            jsonApiMetricDocument: JsonApiMetricDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricDocument>;

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApiInterface
     */
    updateEntityVisualizationObjects(
        params: {
            id: string;
            workspaceId: string;
            jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectDocument>;
}

/**
 * WorkspaceModelControllerApi - object-oriented interface
 * @export
 * @class WorkspaceModelControllerApi
 * @extends {BaseAPI}
 */
export class WorkspaceModelControllerApi extends BaseAPI implements WorkspaceModelControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public createEntityAnalyticalDashboards(
        params: {
            workspaceId: string;
            jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).createEntityAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public createEntityFilterContexts(
        params: {
            workspaceId: string;
            jsonApiFilterContextDocument: JsonApiFilterContextDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).createEntityFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricDocument} jsonApiMetricDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public createEntityMetrics(
        params: {
            workspaceId: string;
            jsonApiMetricDocument: JsonApiMetricDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).createEntityMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public createEntityVisualizationObjects(
        params: {
            workspaceId: string;
            jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).createEntityVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public deleteEntityAnalyticalDashboards(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).deleteEntityAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public deleteEntityFilterContexts(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).deleteEntityFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public deleteEntityMetrics(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).deleteEntityMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public deleteEntityVisualizationObjects(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).deleteEntityVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntitiesAnalyticalDashboards(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntitiesAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntitiesAttributes(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntitiesAttributes(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntitiesDatasets(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntitiesDatasets(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntitiesFacts(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntitiesFacts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntitiesFilterContexts(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntitiesFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntitiesLabels(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntitiesLabels(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntitiesMetrics(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntitiesMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntitiesSources(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntitiesSources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntitiesTables(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntitiesTables(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntitiesVisualizationObjects(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntitiesVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntityAnalyticalDashboards(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntityAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntityAttributes(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntityAttributes(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntityDatasets(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntityDatasets(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntityFacts(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntityFacts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntityFilterContexts(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntityFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntityLabels(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntityLabels(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntityMetrics(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntityMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntitySources(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntitySources(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntityTables(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntityTables(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public getEntityVisualizationObjects(
        params: {
            id: string;
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).getEntityVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public updateEntityAnalyticalDashboards(
        params: {
            id: string;
            workspaceId: string;
            jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).updateEntityAnalyticalDashboards(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public updateEntityFilterContexts(
        params: {
            id: string;
            workspaceId: string;
            jsonApiFilterContextDocument: JsonApiFilterContextDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).updateEntityFilterContexts(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {JsonApiMetricDocument} jsonApiMetricDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public updateEntityMetrics(
        params: {
            id: string;
            workspaceId: string;
            jsonApiMetricDocument: JsonApiMetricDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).updateEntityMetrics(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} id
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceModelControllerApi
     */
    public updateEntityVisualizationObjects(
        params: {
            id: string;
            workspaceId: string;
            jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceModelControllerApiFp(this.configuration).updateEntityVisualizationObjects(
            params,
            options,
        )(this.axios, this.basePath);
    }
}

/**
 * WorkspaceObjectControllerApi - axios parameter creator
 * @export
 */
export const WorkspaceObjectControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards1(
            params: {
                workspaceId: string;
                jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiAnalyticalDashboardDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityAnalyticalDashboards1.",
                );
            }
            // verify required parameter 'jsonApiAnalyticalDashboardDocument' is not null or undefined
            if (
                jsonApiAnalyticalDashboardDocument === null ||
                jsonApiAnalyticalDashboardDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiAnalyticalDashboardDocument",
                    "Required parameter jsonApiAnalyticalDashboardDocument was null or undefined when calling createEntityAnalyticalDashboards1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/analyticalDashboards`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiAnalyticalDashboardDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiAnalyticalDashboardDocument !== undefined
                          ? jsonApiAnalyticalDashboardDocument
                          : {},
                  )
                : jsonApiAnalyticalDashboardDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts1(
            params: {
                workspaceId: string;
                jsonApiFilterContextDocument: JsonApiFilterContextDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiFilterContextDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityFilterContexts1.",
                );
            }
            // verify required parameter 'jsonApiFilterContextDocument' is not null or undefined
            if (jsonApiFilterContextDocument === null || jsonApiFilterContextDocument === undefined) {
                throw new RequiredError(
                    "jsonApiFilterContextDocument",
                    "Required parameter jsonApiFilterContextDocument was null or undefined when calling createEntityFilterContexts1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/filterContexts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiFilterContextDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiFilterContextDocument !== undefined ? jsonApiFilterContextDocument : {},
                  )
                : jsonApiFilterContextDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricDocument} jsonApiMetricDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics1(
            params: {
                workspaceId: string;
                jsonApiMetricDocument: JsonApiMetricDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiMetricDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityMetrics1.",
                );
            }
            // verify required parameter 'jsonApiMetricDocument' is not null or undefined
            if (jsonApiMetricDocument === null || jsonApiMetricDocument === undefined) {
                throw new RequiredError(
                    "jsonApiMetricDocument",
                    "Required parameter jsonApiMetricDocument was null or undefined when calling createEntityMetrics1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/metrics`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiMetricDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiMetricDocument !== undefined ? jsonApiMetricDocument : {})
                : jsonApiMetricDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects1(
            params: {
                workspaceId: string;
                jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, jsonApiVisualizationObjectDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling createEntityVisualizationObjects1.",
                );
            }
            // verify required parameter 'jsonApiVisualizationObjectDocument' is not null or undefined
            if (
                jsonApiVisualizationObjectDocument === null ||
                jsonApiVisualizationObjectDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiVisualizationObjectDocument",
                    "Required parameter jsonApiVisualizationObjectDocument was null or undefined when calling createEntityVisualizationObjects1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/visualizationObjects`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "POST", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiVisualizationObjectDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiVisualizationObjectDocument !== undefined
                          ? jsonApiVisualizationObjectDocument
                          : {},
                  )
                : jsonApiVisualizationObjectDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityAnalyticalDashboards1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityAnalyticalDashboards1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/analyticalDashboards/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityFilterContexts1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityFilterContexts1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/filterContexts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityMetrics1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityMetrics1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/metrics/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling deleteEntityVisualizationObjects1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling deleteEntityVisualizationObjects1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/visualizationObjects/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "DELETE", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAnalyticalDashboards1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesAnalyticalDashboards1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/analyticalDashboards`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAttributes1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesAttributes1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/attributes`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesDatasets1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesDatasets1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/datasets`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFacts1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesFacts1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/facts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFilterContexts1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesFilterContexts1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/filterContexts`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesLabels1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesLabels1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/labels`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesMetrics1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesMetrics1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/metrics`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesSources1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesSources1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/sources`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesTables1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesTables1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/tables`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesVisualizationObjects1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, variableParam, include, page, size, sort } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitiesVisualizationObjects1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/visualizationObjects`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            if (page !== undefined) {
                if (typeof page === "object") {
                    addFlattenedObjectTo(page, localVarQueryParameter);
                } else {
                    localVarQueryParameter["page"] = page;
                }
            }

            if (size !== undefined) {
                if (typeof size === "object") {
                    addFlattenedObjectTo(size, localVarQueryParameter);
                } else {
                    localVarQueryParameter["size"] = size;
                }
            }

            if (sort) {
                localVarQueryParameter["sort"] = sort;
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityAnalyticalDashboards1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityAnalyticalDashboards1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/analyticalDashboards/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityAttributes1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityAttributes1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/attributes/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityDatasets1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityDatasets1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/datasets/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityFacts1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityFacts1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/facts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityFilterContexts1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityFilterContexts1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/filterContexts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityLabels1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityLabels1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/labels/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityMetrics1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityMetrics1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/metrics/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitySources1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntitySources1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntitySources1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/sources/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityTables1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityTables1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityTables1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/tables/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getEntityVisualizationObjects1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling getEntityVisualizationObjects1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/visualizationObjects/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards1(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const {
                workspaceId,
                objectId,
                jsonApiAnalyticalDashboardDocument,
                variableParam,
                include,
            } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityAnalyticalDashboards1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityAnalyticalDashboards1.",
                );
            }
            // verify required parameter 'jsonApiAnalyticalDashboardDocument' is not null or undefined
            if (
                jsonApiAnalyticalDashboardDocument === null ||
                jsonApiAnalyticalDashboardDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiAnalyticalDashboardDocument",
                    "Required parameter jsonApiAnalyticalDashboardDocument was null or undefined when calling updateEntityAnalyticalDashboards1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/analyticalDashboards/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiAnalyticalDashboardDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiAnalyticalDashboardDocument !== undefined
                          ? jsonApiAnalyticalDashboardDocument
                          : {},
                  )
                : jsonApiAnalyticalDashboardDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts1(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiFilterContextDocument: JsonApiFilterContextDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, jsonApiFilterContextDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityFilterContexts1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityFilterContexts1.",
                );
            }
            // verify required parameter 'jsonApiFilterContextDocument' is not null or undefined
            if (jsonApiFilterContextDocument === null || jsonApiFilterContextDocument === undefined) {
                throw new RequiredError(
                    "jsonApiFilterContextDocument",
                    "Required parameter jsonApiFilterContextDocument was null or undefined when calling updateEntityFilterContexts1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/filterContexts/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiFilterContextDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiFilterContextDocument !== undefined ? jsonApiFilterContextDocument : {},
                  )
                : jsonApiFilterContextDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricDocument} jsonApiMetricDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics1(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiMetricDocument: JsonApiMetricDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId, objectId, jsonApiMetricDocument, variableParam, include } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityMetrics1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityMetrics1.",
                );
            }
            // verify required parameter 'jsonApiMetricDocument' is not null or undefined
            if (jsonApiMetricDocument === null || jsonApiMetricDocument === undefined) {
                throw new RequiredError(
                    "jsonApiMetricDocument",
                    "Required parameter jsonApiMetricDocument was null or undefined when calling updateEntityMetrics1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/metrics/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiMetricDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(jsonApiMetricDocument !== undefined ? jsonApiMetricDocument : {})
                : jsonApiMetricDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects1(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): RequestArgs {
            const {
                workspaceId,
                objectId,
                jsonApiVisualizationObjectDocument,
                variableParam,
                include,
            } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling updateEntityVisualizationObjects1.",
                );
            }
            // verify required parameter 'objectId' is not null or undefined
            if (objectId === null || objectId === undefined) {
                throw new RequiredError(
                    "objectId",
                    "Required parameter objectId was null or undefined when calling updateEntityVisualizationObjects1.",
                );
            }
            // verify required parameter 'jsonApiVisualizationObjectDocument' is not null or undefined
            if (
                jsonApiVisualizationObjectDocument === null ||
                jsonApiVisualizationObjectDocument === undefined
            ) {
                throw new RequiredError(
                    "jsonApiVisualizationObjectDocument",
                    "Required parameter jsonApiVisualizationObjectDocument was null or undefined when calling updateEntityVisualizationObjects1.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects/visualizationObjects/{objectId}`
                .replace(`{${"workspaceId"}}`, encodeURIComponent(String(workspaceId)))
                .replace(`{${"objectId"}}`, encodeURIComponent(String(objectId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "PUT", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (variableParam !== undefined) {
                if (typeof variableParam === "object") {
                    addFlattenedObjectTo(variableParam, localVarQueryParameter);
                } else {
                    localVarQueryParameter["variableParam"] = variableParam;
                }
            }

            if (include !== undefined) {
                if (typeof include === "object") {
                    addFlattenedObjectTo(include, localVarQueryParameter);
                } else {
                    localVarQueryParameter["include"] = include;
                }
            }

            localVarHeaderParameter["Content-Type"] = "application/vnd.gooddata.api+json";

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };
            const needsSerialization =
                typeof jsonApiVisualizationObjectDocument !== "string" ||
                localVarRequestOptions.headers["Content-Type"] === "application/json";
            localVarRequestOptions.data = needsSerialization
                ? JSON.stringify(
                      jsonApiVisualizationObjectDocument !== undefined
                          ? jsonApiVisualizationObjectDocument
                          : {},
                  )
                : jsonApiVisualizationObjectDocument || "";

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * WorkspaceObjectControllerApi - functional programming interface
 * @export
 */
export const WorkspaceObjectControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards1(
            params: {
                workspaceId: string;
                jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityAnalyticalDashboards1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts1(
            params: {
                workspaceId: string;
                jsonApiFilterContextDocument: JsonApiFilterContextDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityFilterContexts1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricDocument} jsonApiMetricDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics1(
            params: {
                workspaceId: string;
                jsonApiMetricDocument: JsonApiMetricDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityMetrics1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects1(
            params: {
                workspaceId: string;
                jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).createEntityVisualizationObjects1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityAnalyticalDashboards1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityFilterContexts1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityMetrics1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).deleteEntityVisualizationObjects1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAnalyticalDashboards1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesAnalyticalDashboards1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAttributes1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesAttributes1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesDatasets1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesDatasets1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFacts1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesFacts1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFilterContexts1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesFilterContexts1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesLabels1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesLabels1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesMetrics1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesMetrics1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesSources1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiSourceTablesList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesSources1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesTables1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiSourceTableList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesTables1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesVisualizationObjects1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectList> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitiesVisualizationObjects1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityAnalyticalDashboards1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAttributeDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityAttributes1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiDatasetDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityDatasets1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFactDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityFacts1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityFilterContexts1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiLabelDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityLabels1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityMetrics1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitySources1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiSourceTablesDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntitySources1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityTables1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiSourceTableDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityTables1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).getEntityVisualizationObjects1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards1(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiAnalyticalDashboardDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityAnalyticalDashboards1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts1(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiFilterContextDocument: JsonApiFilterContextDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiFilterContextDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityFilterContexts1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricDocument} jsonApiMetricDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics1(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiMetricDocument: JsonApiMetricDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiMetricDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityMetrics1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects1(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<JsonApiVisualizationObjectDocument> {
            const localVarAxiosArgs = WorkspaceObjectControllerApiAxiosParamCreator(
                configuration,
            ).updateEntityVisualizationObjects1(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * WorkspaceObjectControllerApi - factory interface
 * @export
 */
export const WorkspaceObjectControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityAnalyticalDashboards1(
            params: {
                workspaceId: string;
                jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityAnalyticalDashboards1(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityFilterContexts1(
            params: {
                workspaceId: string;
                jsonApiFilterContextDocument: JsonApiFilterContextDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityFilterContexts1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiMetricDocument} jsonApiMetricDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityMetrics1(
            params: {
                workspaceId: string;
                jsonApiMetricDocument: JsonApiMetricDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityMetrics1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEntityVisualizationObjects1(
            params: {
                workspaceId: string;
                jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectDocument> {
            return WorkspaceObjectControllerApiFp(configuration).createEntityVisualizationObjects1(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityAnalyticalDashboards1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityAnalyticalDashboards1(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityFilterContexts1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityFilterContexts1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityMetrics1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityMetrics1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEntityVisualizationObjects1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
            },
            options?: any,
        ): AxiosPromise<void> {
            return WorkspaceObjectControllerApiFp(configuration).deleteEntityVisualizationObjects1(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAnalyticalDashboards1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesAnalyticalDashboards1(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesAttributes1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiAttributeList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesAttributes1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesDatasets1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiDatasetList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesDatasets1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFacts1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiFactList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesFacts1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesFilterContexts1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesFilterContexts1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesLabels1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiLabelList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesLabels1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesMetrics1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesMetrics1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesSources1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiSourceTablesList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesSources1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesTables1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiSourceTableList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesTables1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {number} [page] Zero-based page index (0..N)
         * @param {number} [size] The size of the page to be returned
         * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitiesVisualizationObjects1(
            params: {
                workspaceId: string;
                variableParam?: { [key: string]: object };
                include?: object;
                page?: number;
                size?: number;
                sort?: Array<string>;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectList> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitiesVisualizationObjects1(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAnalyticalDashboards1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityAnalyticalDashboards1(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityAttributes1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiAttributeDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityAttributes1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityDatasets1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiDatasetDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityDatasets1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFacts1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiFactDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityFacts1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityFilterContexts1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityFilterContexts1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityLabels1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiLabelDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityLabels1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityMetrics1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityMetrics1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntitySources1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiSourceTablesDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntitySources1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityTables1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiSourceTableDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityTables1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntityVisualizationObjects1(
            params: {
                workspaceId: string;
                objectId: string;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectDocument> {
            return WorkspaceObjectControllerApiFp(configuration).getEntityVisualizationObjects1(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityAnalyticalDashboards1(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiAnalyticalDashboardDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityAnalyticalDashboards1(
                params,
                options,
            )(axios, basePath);
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityFilterContexts1(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiFilterContextDocument: JsonApiFilterContextDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiFilterContextDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityFilterContexts1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiMetricDocument} jsonApiMetricDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityMetrics1(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiMetricDocument: JsonApiMetricDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiMetricDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityMetrics1(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {string} objectId
         * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
         * @param {{ [key: string]: object; }} [variableParam]
         * @param {object} [include]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEntityVisualizationObjects1(
            params: {
                workspaceId: string;
                objectId: string;
                jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
                variableParam?: { [key: string]: object };
                include?: object;
            },
            options?: any,
        ): AxiosPromise<JsonApiVisualizationObjectDocument> {
            return WorkspaceObjectControllerApiFp(configuration).updateEntityVisualizationObjects1(
                params,
                options,
            )(axios, basePath);
        },
    };
};

/**
 * WorkspaceObjectControllerApi - interface
 * @export
 * @interface WorkspaceObjectControllerApi
 */
export interface WorkspaceObjectControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityAnalyticalDashboards1(
        params: {
            workspaceId: string;
            jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityFilterContexts1(
        params: {
            workspaceId: string;
            jsonApiFilterContextDocument: JsonApiFilterContextDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricDocument} jsonApiMetricDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityMetrics1(
        params: {
            workspaceId: string;
            jsonApiMetricDocument: JsonApiMetricDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    createEntityVisualizationObjects1(
        params: {
            workspaceId: string;
            jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityAnalyticalDashboards1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityFilterContexts1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityMetrics1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    deleteEntityVisualizationObjects1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ): AxiosPromise<void>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesAnalyticalDashboards1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesAttributes1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiAttributeList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesDatasets1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiDatasetList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesFacts1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiFactList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesFilterContexts1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesLabels1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiLabelList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesMetrics1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesSources1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiSourceTablesList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesTables1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiSourceTableList>;

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitiesVisualizationObjects1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectList>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityAnalyticalDashboards1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityAttributes1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiAttributeDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityDatasets1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiDatasetDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityFacts1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiFactDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityFilterContexts1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityLabels1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiLabelDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityMetrics1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntitySources1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiSourceTablesDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityTables1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiSourceTableDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    getEntityVisualizationObjects1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityAnalyticalDashboards1(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiAnalyticalDashboardDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityFilterContexts1(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiFilterContextDocument: JsonApiFilterContextDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiFilterContextDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricDocument} jsonApiMetricDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityMetrics1(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiMetricDocument: JsonApiMetricDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiMetricDocument>;

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApiInterface
     */
    updateEntityVisualizationObjects1(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ): AxiosPromise<JsonApiVisualizationObjectDocument>;
}

/**
 * WorkspaceObjectControllerApi - object-oriented interface
 * @export
 * @class WorkspaceObjectControllerApi
 * @extends {BaseAPI}
 */
export class WorkspaceObjectControllerApi extends BaseAPI implements WorkspaceObjectControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityAnalyticalDashboards1(
        params: {
            workspaceId: string;
            jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityAnalyticalDashboards1(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityFilterContexts1(
        params: {
            workspaceId: string;
            jsonApiFilterContextDocument: JsonApiFilterContextDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityFilterContexts1(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiMetricDocument} jsonApiMetricDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityMetrics1(
        params: {
            workspaceId: string;
            jsonApiMetricDocument: JsonApiMetricDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityMetrics1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public createEntityVisualizationObjects1(
        params: {
            workspaceId: string;
            jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).createEntityVisualizationObjects1(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityAnalyticalDashboards1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityAnalyticalDashboards1(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityFilterContexts1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityFilterContexts1(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityMetrics1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityMetrics1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public deleteEntityVisualizationObjects1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).deleteEntityVisualizationObjects1(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesAnalyticalDashboards1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesAnalyticalDashboards1(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesAttributes1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesAttributes1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesDatasets1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesDatasets1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesFacts1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesFacts1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesFilterContexts1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesFilterContexts1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesLabels1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesLabels1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesMetrics1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesMetrics1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesSources1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesSources1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesTables1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesTables1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {number} [page] Zero-based page index (0..N)
     * @param {number} [size] The size of the page to be returned
     * @param {Array<string>} [sort] Sorting criteria in the format: property(,asc|desc). Default sort order is ascending. Multiple sort criteria are supported.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitiesVisualizationObjects1(
        params: {
            workspaceId: string;
            variableParam?: { [key: string]: object };
            include?: object;
            page?: number;
            size?: number;
            sort?: Array<string>;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitiesVisualizationObjects1(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityAnalyticalDashboards1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityAnalyticalDashboards1(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityAttributes1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityAttributes1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityDatasets1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityDatasets1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityFacts1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityFacts1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityFilterContexts1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityFilterContexts1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityLabels1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityLabels1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityMetrics1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityMetrics1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntitySources1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntitySources1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityTables1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityTables1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public getEntityVisualizationObjects1(
        params: {
            workspaceId: string;
            objectId: string;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).getEntityVisualizationObjects1(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiAnalyticalDashboardDocument} jsonApiAnalyticalDashboardDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityAnalyticalDashboards1(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiAnalyticalDashboardDocument: JsonApiAnalyticalDashboardDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityAnalyticalDashboards1(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiFilterContextDocument} jsonApiFilterContextDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityFilterContexts1(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiFilterContextDocument: JsonApiFilterContextDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityFilterContexts1(
            params,
            options,
        )(this.axios, this.basePath);
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiMetricDocument} jsonApiMetricDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityMetrics1(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiMetricDocument: JsonApiMetricDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityMetrics1(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {string} objectId
     * @param {JsonApiVisualizationObjectDocument} jsonApiVisualizationObjectDocument
     * @param {{ [key: string]: object; }} [variableParam]
     * @param {object} [include]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceObjectControllerApi
     */
    public updateEntityVisualizationObjects1(
        params: {
            workspaceId: string;
            objectId: string;
            jsonApiVisualizationObjectDocument: JsonApiVisualizationObjectDocument;
            variableParam?: { [key: string]: object };
            include?: object;
        },
        options?: any,
    ) {
        return WorkspaceObjectControllerApiFp(this.configuration).updateEntityVisualizationObjects1(
            params,
            options,
        )(this.axios, this.basePath);
    }
}

/**
 * WorkspaceRootModelControllerApi - axios parameter creator
 * @export
 */
export const WorkspaceRootModelControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootJsonApi11(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getRootJsonApi11.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/objects`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootJsonApi2(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): RequestArgs {
            const { workspaceId } = params;
            // verify required parameter 'workspaceId' is not null or undefined
            if (workspaceId === null || workspaceId === undefined) {
                throw new RequiredError(
                    "workspaceId",
                    "Required parameter workspaceId was null or undefined when calling getRootJsonApi2.",
                );
            }
            const localVarPath = `/api/workspaces/{workspaceId}/model`.replace(
                `{${"workspaceId"}}`,
                encodeURIComponent(String(workspaceId)),
            );
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: "GET", ...baseOptions, ...options };
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // @ts-ignore fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...options.headers };

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};

/**
 * WorkspaceRootModelControllerApi - functional programming interface
 * @export
 */
export const WorkspaceRootModelControllerApiFp = function (configuration?: Configuration) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootJsonApi11(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentationModelObject> {
            const localVarAxiosArgs = WorkspaceRootModelControllerApiAxiosParamCreator(
                configuration,
            ).getRootJsonApi11(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootJsonApi2(
            params: {
                workspaceId: string;
            },
            options: any = {},
        ): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepresentationModelObject> {
            const localVarAxiosArgs = WorkspaceRootModelControllerApiAxiosParamCreator(
                configuration,
            ).getRootJsonApi2(params, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {
                    ...localVarAxiosArgs.options,
                    url: basePath + localVarAxiosArgs.url,
                };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};

/**
 * WorkspaceRootModelControllerApi - factory interface
 * @export
 */
export const WorkspaceRootModelControllerApiFactory = function (
    configuration?: Configuration,
    basePath?: string,
    axios?: AxiosInstance,
) {
    return {
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootJsonApi11(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<RepresentationModelObject> {
            return WorkspaceRootModelControllerApiFp(configuration).getRootJsonApi11(params, options)(
                axios,
                basePath,
            );
        },
        /**
         *
         * @param {string} workspaceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRootJsonApi2(
            params: {
                workspaceId: string;
            },
            options?: any,
        ): AxiosPromise<RepresentationModelObject> {
            return WorkspaceRootModelControllerApiFp(configuration).getRootJsonApi2(params, options)(
                axios,
                basePath,
            );
        },
    };
};

/**
 * WorkspaceRootModelControllerApi - interface
 * @export
 * @interface WorkspaceRootModelControllerApi
 */
export interface WorkspaceRootModelControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceRootModelControllerApiInterface
     */
    getRootJsonApi11(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<RepresentationModelObject>;

    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceRootModelControllerApiInterface
     */
    getRootJsonApi2(
        params: {
            workspaceId: string;
        },
        options?: any,
    ): AxiosPromise<RepresentationModelObject>;
}

/**
 * WorkspaceRootModelControllerApi - object-oriented interface
 * @export
 * @class WorkspaceRootModelControllerApi
 * @extends {BaseAPI}
 */
export class WorkspaceRootModelControllerApi extends BaseAPI
    implements WorkspaceRootModelControllerApiInterface {
    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceRootModelControllerApi
     */
    public getRootJsonApi11(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return WorkspaceRootModelControllerApiFp(this.configuration).getRootJsonApi11(params, options)(
            this.axios,
            this.basePath,
        );
    }

    /**
     *
     * @param {string} workspaceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkspaceRootModelControllerApi
     */
    public getRootJsonApi2(
        params: {
            workspaceId: string;
        },
        options?: any,
    ) {
        return WorkspaceRootModelControllerApiFp(this.configuration).getRootJsonApi2(params, options)(
            this.axios,
            this.basePath,
        );
    }
}
